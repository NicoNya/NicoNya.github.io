<?xml version="1.0" encoding="utf-8"?>






<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>七夜LaNotte</title>
        <link>https://niconya.github.io/</link>
        <description>MemE 是一个强大且可高度定制的 GoHugo 博客主题，专为个人博客设计。</description>
        <generator>Hugo 0.69.1 https://gohugo.io/</generator>
        
            <language>zh-CN</language>
        
        
            <managingEditor>djvineh8@gmail.com (NicoNya)</managingEditor>
        
        
            <webMaster>djvineh8@gmail.com (NicoNya)</webMaster>
        
        
            <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
        
        <lastBuildDate>Wed, 22 Apr 2020 23:36:02 +0800</lastBuildDate>
        
            <atom:link rel="self" type="application/rss+xml" href="https://niconya.github.io/rss.xml" />
        
        
            <item>
                <title>使用mklink让OneDrive自动同步本地任意文件夹</title>
                <link>https://niconya.github.io/posts/%E4%BD%BF%E7%94%A8mklink%E8%AE%A9onedrive%E8%87%AA%E5%8A%A8%E5%90%8C%E6%AD%A5%E6%9C%AC%E5%9C%B0%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%A4%B9/</link>
                <guid isPermaLink="true">https://niconya.github.io/posts/%E4%BD%BF%E7%94%A8mklink%E8%AE%A9onedrive%E8%87%AA%E5%8A%A8%E5%90%8C%E6%AD%A5%E6%9C%AC%E5%9C%B0%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%A4%B9/</guid>
                <pubDate>Wed, 22 Apr 2020 19:52:18 +0800</pubDate>
                
                    <author>djvineh8@gmail.com (NicoNya)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<p><strong>使用Onedrive自动同步电脑上的文件，只有放在Onedrive对应目录下才能自动同步，而文件都放在这一路径下，势必会导致文件夹占用过大空间，并且OneDrive的备份功能只能备份桌面、文档和图片文件夹，此时可以使用mklink创建软链接映射来同步其他文件夹的文件。</strong></p>
<h2 id="使用方法">使用方法</h2>
<h3 id="命令格式">命令格式</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">mklink /j juctionpath target
<span class="c1">#target即是你要同步的不在Onedrive路径下的文件夹，而juctionpath为在Onedrive路径下“将要”新建的文件夹（juction）名字</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="使用场景">使用场景</h3>
<p>例如要把我D盘下的<code>D:\Test1</code>文件夹同步到OneDrive目录中的<code>E:\OneDrive\Test2</code>文件夹</p>
<p>以管理员模式打开命令提示符，在打开的窗口中输入命令：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="n">mklink</span><span class="p">/</span><span class="n">d</span> <span class="n">E:</span><span class="p">\</span><span class="n">OneDrive</span><span class="p">\</span><span class="n">Test2</span> <span class="n">D:</span><span class="p">\</span><span class="n">Test1</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p><strong>执行本操作时请确保OneDrive目录下没有名为你要创建的目录，否则将会报错</strong></p>
<p><strong>均使用绝对路径，如果路径中有空格，请在路径前后加上英文状态下的引号(&quot;)</strong></p>
</blockquote>
<p>回车键执行后，命令提示符返回<code>为…创建的符号链接 </code>字样的文字，即说明建立连接成功</p>
<p>会在<code>E:\OneDrive</code>路径下生成指向<code>D:\Test1</code>的文件夹<code>Test2</code>，可以实现对<code>D:\Test1</code>文件夹的自动同步</p>
<h2 id="使用时发现的问题">使用时发现的问题</h2>
<ul>
<li>
<p>使用时候发现在被同步的文件夹内如果只是修改了某个文件的名字而不对文件内容进行修改或者是新创建了文件，OneDrive内链接到的文件虽然也会更改文件名或者新建了文件，但是远程网盘上的文件名字不会被更改，文件也不会被创建，系统托盘内OneDrive的图标上也没有更新的动作产生。</p>
<p><strong>解决办法：</strong></p>
<p>如果进行了重命名文件的操作，需要记住再打开一下文件，进行任意操作并保存，OneDrive就会开始自动进行文件的更新操作</p>
<p>如果还不可以，就在OneDrive网盘内对应文件处右键点击查看历史版本记录，也会触发OneDrive的更新操作</p>
<p>或者最简便的方法就是重启一下OneDrive客户端，如果不急着在多端使用文件的话，电脑重启时候也会触发到更新操作</p>
</li>
<li>
<p>OneDrive网盘内链接的文件夹一直都是同步被挂起状态，暂不知道怎么解决</p>
</li>
</ul>]]></description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://niconya.github.io/tags/onedrive/">OneDrive</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>《玩转Vim 从放弃到爱不释手》学习笔记</title>
                <link>https://niconya.github.io/posts/%E7%8E%A9%E8%BD%ACvim-%E4%BB%8E%E6%94%BE%E5%BC%83%E5%88%B0%E7%88%B1%E4%B8%8D%E9%87%8A%E6%89%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
                <guid isPermaLink="true">https://niconya.github.io/posts/%E7%8E%A9%E8%BD%ACvim-%E4%BB%8E%E6%94%BE%E5%BC%83%E5%88%B0%E7%88%B1%E4%B8%8D%E9%87%8A%E6%89%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
                <pubDate>Sun, 12 Apr 2020 17:59:25 +0800</pubDate>
                
                    <author>djvineh8@gmail.com (NicoNya)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<p>本篇是b站up主<a href="https://space.bilibili.com/288339968">PegasusWang</a>老师的<a href="https://www.imooc.com/coursescore/1129">玩转Vim 从放弃到爱不释手</a>教程笔记，在大学的时候使用过vim，但只是停留非常低级的操作阶段，也在其他地方零散的学习过Vim，直到在b站发现了PegasusWang的视频，非常不错，是目前看到过最好的vim入门教程，经过几天的学习，Vim已经近乎熟练，再次感谢PegasusWang的无私奉献，笔记还会持续更新。</p>
<h1 id="vim编辑器的四种模式">Vim编辑器的四种模式</h1>
<h2 id="normal普通模式">Normal(普通)模式</h2>
<p><strong>使用vim打开文件时显示的模式，只可以查看，不可以做任何编辑操作</strong></p>
<p>进行所有操作之后可以单击<code>u</code>**(undo)**来撤销操作</p>
<h3 id="移动操作">移动操作</h3>
<p><code>w/W</code>  移到下一-个word/WORD开头。<code>e/E</code> 下一个word/WORD尾</p>
<p><code>b/B </code>  回到上一-个word/WORD开头，可以理解为backword</p>
<p>word指的是以非空白符分割的单词，WORD以空白符分割的单词</p>
<h3 id="搜索操作">搜索操作</h3>
<p>同一行快速移动的方式其实是搜索一个字符并且移动到该字符</p>
<p><code>f{char} </code>  可以把光标移动到当前行的char字符上，<code>t</code>把光标移动到char的前一个字符</p>
<p>如果第一次没搜到，可以用分号<code>;</code>和逗号<code>,</code>继续搜该行里的下一个/上一个char字符</p>
<p>大写的<code>F{char}</code>表示反过来搜前面的字符</p>
<h3 id="快速移动到一行的行首或者行尾">快速移动到一行的行首或者行尾</h3>
<p><code>0</code>  移动到行首第一个字符，<code>^</code>移动到第一个非空白字符</p>
<p><code>$</code>  移动到行尾，<code>g_</code>  移动到行尾非空白字符</p>
<p>记住常用的<code>0</code>和<code>$</code>就可以满足日常需求了</p>
<h3 id="页面移动">页面移动</h3>
<p><code>gg / G </code>  移动到文件开头和结尾，你可以使用ctrl+o快速返回</p>
<p><code>H / M / L</code>  跳转到屏幕的开头(Head)，中间(Middle)和结尾(Lower)</p>
<p><code>Ctrl+u</code> / <code> ctrl+f</code>   上下翻页 (upword/forward)</p>
<p><code>zz</code>  把当前光标放置到屏幕置中间</p>
<h3 id="删除操作">删除操作</h3>
<p><code>x</code>  快速删除一个字符</p>
<p><code>dw</code>  **delete word：**快速删除一个单词</p>
<p><code>dd</code>  快速删除当前整行内容</p>
<h3 id="修改操作">修改操作</h3>
<p>常用有三个，<code>r</code> (replace) ， <code>c</code> (change) ，<code>s</code>(substitute)</p>
<p><code>r</code>可以替换一个字，<code>s</code>替换并进入插入模式</p>
<p>*<code>cw</code>  <strong>change word：</strong> 快速删除一个单词并且进入编辑模式</p>
<h3 id="查询操作">查询操作</h3>
<p><code>/ 或者 ?</code>  进行前向或者反向搜索</p>
<p><code>n / N</code>  跳转到下一个或者上一个匹配</p>
<h3 id="normal下的复制粘贴">Normal下的复制粘贴</h3>
<p>复制剪切分别使用<code>y</code>**(yank)**和<code>p</code>**(put)**，剪切用<code>d</code></p>
<p>我们可以使用<code>v</code>**(visual)**命令进入可视模式选中所要复制的地方，然后使用<code>p</code>粘贴</p>
<p>配合文本对象：比如使用<code>yw</code>复制一个单词， <code>yy</code>复制一行</p>
<h2 id="编辑插入模式">编辑/插入模式</h2>
<p><strong>普通模式下单击以下字母进入编辑/插入模式</strong></p>
<p><code>i</code>  <strong>insert：</strong> 在当前光标位置前面开始插入</p>
<p><code>I</code>  <strong>insert before line：</strong> 光标调到当前行最前面开始插入</p>
<p><code>a</code>  **append： **在当前光标位置后面开始插入</p>
<p><code>A</code>  <strong>append after line：</strong> 光标跳到当前行最后面开始插入</p>
<p><code>o</code>  <strong>open a line below：</strong> 在当前光标所在行下面新加一行开始插入</p>
<p><code>O</code>  <strong>open a line above：</strong> 在当前光标所在行上面新加一行开始插入</p>
<blockquote>
<p>按Esc可以退出编辑模式进入普通模式，我在<code>.vimrc</code>里配置了<code>jj</code>映射来方便地进入普通模式</p>
</blockquote>
<h3 id="快捷键">快捷键</h3>
<p><code>gi</code>  快速返回上一次编辑的位置</p>
<h4 id="终端中和vim插入模式下都可以使用的快捷键">终端中和vim插入模式下都可以使用的快捷键：</h4>
<p><code>ctrl+h </code>  删除上一个字符</p>
<p><code>ctrl+w </code>  删除上一个单词</p>
<p><code>ctrl+u </code>  删除当前行</p>
<p><code>ctrl+a </code>  移动到开头</p>
<p><code>ctrl+e</code>  移动到结尾</p>
<p><code>ctrl+b </code>  往前移动</p>
<p><code>ctrl+f </code>  往后移动</p>
<h2 id="命令模式">命令模式</h2>
<p><strong>普通模式下单击冒号<code>:</code>进入命令模式</strong></p>
<h3 id="保存退出方式">保存退出方式</h3>
<p><code>:q</code>  quite 退出</p>
<p><code>:w</code>  write 写入/保存</p>
<p><code>:wq</code>  write &amp; quite 保存然后退出</p>
<p><code>ZZ</code>  作用等同于<code>:wq</code></p>
<p><code>:e!</code>  禁止刚刚所有修改</p>
<h3 id="多文件操作">多文件操作</h3>
<p><strong><code>Buffer</code>、<code>Window</code>、<code>Tab</code>区别：</strong></p>
<ul>
<li><code>Buffer</code>是指打开的一个文件的内存缓冲区
<ul>
<li>Vim打开一个文件后会加载文件内容到缓冲区</li>
<li>之后的修改都是针对内存中的缓冲区,并不会直接保存到文件</li>
<li>直到我们执行<code>:w</code> (write)的时候才会把修改内容写入到文件里</li>
</ul>
</li>
<li><code>Window</code>是Buffer可视化的分割区域
<ul>
<li>一个缓冲区可以分割成多个窗口, 每个窗口也可以打开不同缓冲区</li>
<li>每个窗口可以继续被无限分割(看你屏幕是否够大)</li>
</ul>
</li>
<li><code>Tab</code>可以组织窗口为一-个工作区.
<ul>
<li>Vim的Tab和其他编辑器不太一样，可以想象成Linux的虚拟桌面</li>
<li>比如一个Tab全用来编辑Python文件，一个Tab全是HTML文件</li>
<li>相比窗口，Tab一般用的比较少，Tab太多管理起来也比较麻烦</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2020/04/11/LJ1uifs38d6gjVw.png" alt="buffer、window、tab区别.png" style="zoom: 80%;" /></p>
<p><strong>打开多个Buffer(缓冲区)：</strong></p>
<ul>
<li>使用<code>:e {文件名}</code>可以打开多个文件，这时虽然只有一个窗口，但是却有多个Buffer(缓冲区)</li>
</ul>
<p><strong>在Buffer(缓冲区)之间切换：</strong></p>
<ul>
<li>
<p>使用<code>:ls</code>会列举当前缓冲区，然后使用<code>:b n</code>跳转到第n个缓冲区</p>
</li>
<li>
<p>使用<code>:bpre</code>  <code> :bnext</code>  <code>:bfirst</code>  <code>:blast</code>来跳转到 上一个/下一个/第一个/最后一个 缓冲区</p>
</li>
<li>
<p>或者用<code>:b {buffe名称}</code>加上tab补全来跳转缓冲区</p>
</li>
</ul>
<p><strong>分割Window(窗口)命令：</strong></p>
<ul>
<li><code>&lt;Ctrl+w&gt;+s</code>或<code>:sp</code>水平分割</li>
<li><code>&lt;Ctrl+w&gt;+v</code>或<code>:vs</code>垂直分割，<code>:q</code> 来退出分屏</li>
<li>使用<code>:sp {文件路径}</code>或<code>:vs {文件路径}</code>可以在横竖分屏时直接打开指定的文件</li>
</ul>
<p><strong>在Window(窗口)之间切换：</strong></p>
<ul>
<li>
<p><code>&lt;Ctrl+w&gt;+w</code>  在窗口间循环切换</p>
</li>
<li>
<p><code>&lt;Ctrl+w&gt;+h</code>  切换到左边的窗口</p>
</li>
<li>
<p><code>&lt;Ctrl+w&gt;+j</code>  切换到下边的窗口</p>
</li>
<li>
<p><code>&lt;Ctrl+w&gt;+k</code>  切换到上边的窗口</p>
</li>
<li>
<p><code>&lt;Ctrl+w&gt;+l</code>  切换到右边的窗口</p>
</li>
</ul>
<blockquote>
<p>可以使用<code>:q</code> /<code>:wq</code>来关闭分屏</p>
<p>切换窗口快捷键就是vim内上下左右对应的<code>k</code> <code>j</code> <code>h</code> <code>l</code>方向键，记住<code>j</code>是下就好</p>
<p>将切换窗口的方向快捷键改为大写效果是移动窗口</p>
<p>在不同窗口编辑同一个Buffer，所有的Buffer都会生效，因为都是编辑的同一块内存里的内容</p>
</blockquote>
<h3 id="替换操作">替换操作</h3>
<p>substitute命令允许我们查找并且替换掉文本，并且支持正则式</p>
<p><code>:[range]s[ubstitute]/{pattern}/{string}/[flags]</code></p>
<p><code>range</code>  表示范围，比如：<code>10, 20</code>表示10-20行，<code>%</code>表示全部</p>
<p><code>s</code>  **substitute：**表示替换</p>
<p><code>pattern</code>  是要替换的文本，<code>string </code>  是替换后文本</p>
<p><code>flage</code>  是替换标志，一般有：</p>
<ul>
<li><code>g</code>  **global：**表示全局范围内执行</li>
<li><code>c</code>  **confirm：**表示确认，可以确认或者拒绝修改</li>
<li><code>n</code>  **number：**报告匹配到的次数而不替换，可以用来查询某个单词出现的次数，例如：<code>:% s/java//n</code> (因为是查询所以java后面留空)</li>
</ul>
<blockquote>
<p>例如：</p>
<p><code>:% s/java/python/g</code></p>
<p>表示在整个文件内把“java”替换为“python”，<code>%</code>：所有文件	<code>s</code>：替换	<code>g</code>：全局替换</p>
</blockquote>
<h3 id="解决粘贴缩进混乱的操作">解决粘贴缩进混乱的操作</h3>
<p><code>:set paste</code>  保留原格式粘贴，先执行该命令，再按<code>i</code>进入编辑模式粘贴就会保留原文件格式</p>
<p><code>:set nopaste</code>  关闭粘贴命令</p>
<p><code>h paste</code>  显示粘贴命令帮助，<code>:exit</code>退出帮助</p>
<h3 id="其他操作">其他操作</h3>
<p><code>:set nu</code>  显示行号</p>
<p><code>:% s/java/python/g</code>  全局替换字符，把“java”替换为“python”	<code>%</code>：所有文件	<code>s</code>：替换	<code>g</code>：全局替换</p>
<h2 id="visual可视模式">Visual(可视)模式</h2>
<p><code>v</code>  进入<strong>VISUAL</strong>选择模式，会选中当前字符，左右移动光标可以连续选中左右字符，上下移动光标会选中整行字符</p>
<p><code>V</code>  选中当前行，上下移动光标可以连续选中上下整行字符</p>
<p><code>ctrl + v</code>  进入<strong>VISUAL BLOCK</strong>：列选择/块选择模式，用于列编辑</p>
<p><strong>在visual模式下：</strong></p>
<p><code>y</code>  **yank：**复制</p>
<p><code>d</code>  剪切</p>
<p><code>p</code>  **put：**粘贴</p>
<p><code>dd</code>  删除一行</p>
<p><code>yy</code>  复制一行</p>
<h1 id="给vim更换配色">给vim更换配色</h1>
<h2 id="使用普通命令方式更换第三方配色">使用普通命令方式更换第三方配色</h2>
<p>以<code>hybrid</code>主题为例，先在用户根目录下clone好主题的仓库</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">git clone https://github.com/w0ng/vim-hybrid.git
</code></pre></td></tr></table>
</div>
</div><p>然后在用户根目录下创建<code>.vim/colors</code>文件夹，如果没有<code>.vim</code>文件夹需要先创建好<code>.vim</code>文件夹</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">mkdir ~/.vim
mkdir ~/.vim/colors
</code></pre></td></tr></table>
</div>
</div><p>接着把hybird主题文件夹内的Vim主题文件拷贝到刚创建好的colors文件夹内</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">cp vim-hybrid/colors/hybrid.vim ./.vim/colors
</code></pre></td></tr></table>
</div>
</div><p>最后用Vim任意打开一个文件，键入<code>:colorscheme</code>，敲一个空格后按<code>ctrl+d</code>，就可以看到Vim可以更换的所有主题配色了</p>
<p>接着输入你想更换的配色的名字，点击回车，可以看到vim编辑器的配色就被成功更改了</p>
<blockquote>
<p>这种方式不能持久化的更改vim编辑器的配色</p>
</blockquote>
<h1 id="vim配置文件的使用">Vim配置文件的使用</h1>
<p>Vim里非常多常用的设置，比如<code>:set number</code>设置行号，之前的使用都是在Vim里临时设置，没法持久化，每次都要重新设置</p>
<p>但是Vim还提供了一种持久化配置的方式，<strong>使用<code>.vimrc</code>配置文件</strong>，让我们自定义配置</p>
<h2 id="新建vim配置文件">新建Vim配置文件</h2>
<p>Linux/Unix下新建一个隐藏文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">vim ~/.vimrc
</code></pre></td></tr></table>
</div>
</div><p>接着我们就可以开始自定义自己的配置了</p>
<h2 id="vimrc配置文件的内容">Vimrc配置文件的内容</h2>
<p>配置文件内需要设置的东西有以下四种：</p>
<ul>
<li>
<p>常用设置，我们可以把常用的设置写到<code>.vimrc</code>内避免每次打卡爱vim重新设置，比如：</p>
<ul>
<li>
<p><code>set number</code>  设置行号，<code>colorscheme xxx</code>  设置主题</p>
</li>
<li>
<p>Vim内有非常多这种配置，可以参考别人的配置，常用的有：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="s">&#34; 设置行号</span>
<span class="n">set</span> <span class="n">number</span>
<span class="s">&#34; 设置主题</span>
<span class="n">colorscheme</span> <span class="n">hybrid</span>
<span class="s">&#34; 按F2进入粘贴模式</span>
<span class="n">set</span> <span class="n">pastetoggle</span><span class="o">=&lt;</span><span class="n">F2</span><span class="o">&gt;</span>
<span class="s">&#34; 高亮搜索</span>
<span class="n">set</span> <span class="n">hlsearch</span>
<span class="s">&#34; 设置折叠方式</span>
<span class="n">set</span> <span class="n">foldmethod</span><span class="o">=</span><span class="n">indent</span> 
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p>Vim映射配置，Vim中的映射比较复杂，源于Vim有多种模式</p>
<ul>
<li>
<p>设置一下leader键<code>let mapleader = ‘,’</code>常用的是逗号或空格</p>
</li>
<li>
<p>比如<code>noremap &lt;leader&gt;w :w&lt;cr&gt;</code>保存文件</p>
</li>
<li>
<p>在下面映射章节有详细讲解Vim中的映射概念和常用的映射配置</p>
</li>
</ul>
</li>
<li>
<p>插件的配置，现代化的Vim可以通过插件管理器安装插件</p>
<ul>
<li>通过插件可以无限扩充Vim的功能</li>
<li>使用插件需要具备一定的Vim配置知识</li>
<li>在下面插件章节有详细讲解如何安装和使用常用插件</li>
</ul>
</li>
<li>
<p>Vim脚本函数配置，Vim有可以自定义的脚本语言vimscript</p>
<ul>
<li>Vim脚本对于Vim高级玩家来说可以实现强大的vim插件</li>
<li>初学者知道有这个概念就好， vim脚本是一种简单的脚本语言</li>
<li>可以通过vimscript实现更多vim的控制，开发自己的插件</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>可以研究下github上vim-go教程<a href="https://github.com/fatih/vim-go-tutorial">vim-go-tutorial</a>的vimrc文件</strong></p>
<p><strong>这个文件是使用vim写go语言的一个最小配置，基本涵盖了一个编程语言需要设置的选项，可以用来参考学习</strong></p>
<p>通过把vimrc配置放到git版本备库管理，可以同步到其他电脑或者服务器上</p>
</blockquote>
<h1 id="vim映射的使用">Vim映射的使用</h1>
<p><strong>Vim映射就是把「一个操作」映射到「另一个操作」</strong></p>
<p>如果你不满现在的按键设置，比如vim本来的命令，或者你想映射一些方便的快捷键时，按照你的意愿定制Vim</p>
<h2 id="基本映射">基本映射</h2>
<p><strong>基本映射指的是normal模式下的映射，当然还有其他模式的映射</strong></p>
<p>使用<code>map</code>就可以实现映射。比如：</p>
<p><code>map- x</code>  表示按<code>-</code>就会删除字符</p>
<p><code>map &lt;space&gt; viw</code>  表示按下空格的时候选中整个单词</p>
<p><code>map &lt;c-d&gt; dd</code>  表示使用<code>ctrl+d</code>执行<code>dd</code>删除一行</p>
<h2 id="模式映射">模式映射</h2>
<p><strong>Vim常用模式<code>normal</code>/<code>visual</code>/<code>insert</code>都可以定义映射</strong></p>
<p>用<code>nmap</code>/<code>vmap</code>/<code>imap</code>定义映射只在<code>normal</code>/<code>visual</code>/<code>insert</code>分别有效，比如：</p>
<p><code>:vmap \ U</code>  表示把在<code>visual模式</code>下选中的文本用<code>\</code>转换大小写  (u/U转换大小写)</p>
<p><code>:imap &lt;d-d&gt; &lt;Esc&gt;ddi</code>  表示在<code>insert模式</code>下用<code>ctrl+d</code>删除一行</p>
<h2 id="递归映射与非递归映射">递归映射与非递归映射</h2>
<h3 id="递归映射">递归映射</h3>
<p>*<strong>map系列命令有递归的风险</strong>，例如定义了以下两个映射：</p>
<p><code>:nmap \ -</code>  和  <code>:nmap - dd</code></p>
<p>当你按下<code>\</code>时, Vim会解释其为<code>-</code>，我们又映射了<code>-</code>，Vim会继续解析为<code>dd</code>，即它会删除整行，即有点类似于递归</p>
<p>通常情况是你安装了一个插件，插件映射了同一个按键的不同行为，有冲突就会有一个失效，解决方案就是使用非递归映射</p>
<h3 id="非递归映射">非递归映射</h3>
<p><strong>Vim提供了非递归映射,这些命令不会递归解释</strong></p>
<p>使用<code>*map</code>对应的<code>nnoremap</code>/<code>vnoremap</code>/<code>inoremap</code></p>
<p>「任何」时候都应该使用非递归映射，防止自己的命令和其他命令冲突</p>
<h3 id="一些方便的映射">一些方便的映射</h3>
<p>以上的设置映射的命令都可以去掉冒号<code>:</code>持久化到<code>.vimrc</code>文件内，这里提供一些常用的映射配置：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="s">&#34; 把leader键映射为&#39;,&#39;</span>
<span class="n">let</span> <span class="n">mapleader</span><span class="o">=</span><span class="sc">&#39;,&#39;</span> 
<span class="s">&#34; 使用 jj 进入 normal 模式</span>
<span class="n">inoremap</span> <span class="n">jj</span> <span class="o">&lt;</span><span class="n">Esc</span><span class="o">&gt;</span><span class="err">`</span><span class="o">^</span>
<span class="s">&#34; 使用 leader+w 直接保存</span>
<span class="n">inoremap</span> <span class="o">&lt;</span><span class="n">leader</span><span class="o">&gt;</span><span class="n">w</span> <span class="o">&lt;</span><span class="n">Esc</span><span class="o">&gt;:</span><span class="n">W</span><span class="o">&lt;</span><span class="n">Cr</span><span class="o">&gt;</span>
<span class="n">noremap</span> <span class="o">&lt;</span><span class="n">leader</span><span class="o">&gt;</span><span class="nl">w</span> <span class="p">:</span><span class="n">W</span><span class="o">&lt;</span><span class="n">cr</span><span class="o">&gt;</span>
<span class="s">&#34; 切换buffer</span>
<span class="n">nnoremap</span> <span class="o">&lt;</span><span class="n">silent</span><span class="o">&gt;</span> <span class="p">[</span><span class="nl">b</span> <span class="p">:</span><span class="n">bprevious</span><span class="o">&lt;</span><span class="n">CR</span><span class="o">&gt;</span>
<span class="n">nnoremap</span> <span class="o">&lt;</span><span class="n">silent</span><span class="o">&gt;</span> <span class="p">[</span><span class="nl">n</span> <span class="p">:</span><span class="n">bnext</span><span class="o">&lt;</span><span class="n">CR</span><span class="o">&gt;</span>
<span class="s">&#34; 使用 ctrl+h/j/k/l 切换 window</span>
<span class="n">noremap</span> <span class="o">&lt;</span><span class="n">C</span><span class="o">-</span><span class="n">h</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">C</span><span class="o">-</span><span class="n">w</span><span class="o">&gt;</span><span class="n">h</span>
<span class="n">noremap</span> <span class="o">&lt;</span><span class="n">C</span><span class="o">-</span><span class="n">j</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">C</span><span class="o">-</span><span class="n">w</span><span class="o">&gt;</span><span class="n">j</span>
<span class="n">noremap</span> <span class="o">&lt;</span><span class="n">C</span><span class="o">-</span><span class="n">k</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">C</span><span class="o">-</span><span class="n">w</span><span class="o">&gt;</span><span class="n">k</span>
<span class="n">noremap</span> <span class="o">&lt;</span><span class="n">C</span><span class="o">-</span><span class="n">l</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">C</span><span class="o">-</span><span class="n">w</span><span class="o">&gt;</span><span class="n">l</span>
<span class="s">&#34; 使用 sudo 强制写入</span>
<span class="n">cnoremap</span> <span class="n">w</span><span class="o">!!</span> <span class="n">w</span> <span class="o">!</span><span class="n">sudo</span> <span class="n">tee</span> <span class="o">%</span> <span class="o">&gt;/</span><span class="n">dev</span><span class="o">/</span><span class="n">null</span>
<span class="s">&#34; json格式化 这是命令模式下的映射</span>
<span class="n">com</span><span class="o">!</span> <span class="n">FormatJSON</span> <span class="o">%!</span><span class="n">python3</span> <span class="o">-</span><span class="n">m</span> <span class="n">json</span><span class="p">.</span> <span class="n">tool</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p><strong>可以研究下<a href="http://www.shouce.ren/api/view/a/9602">笨方法学Vimscript</a>这本书中映射章节的内容</strong></p>
</blockquote>
<h1 id="vim插件的使用">Vim插件的使用</h1>
<p><strong>和其他现代流行编辑器一样, Vim同样支持强大的插件扩展</strong></p>
<p>Vim 插件是使用vimscript或者其他语言编写的vim功能扩展，编辑器自带的功能有限，有了插件之后几乎可以无限制扩充其功能</p>
<p>网络上比如github.com等有很多开源的vim插件可以使用</p>
<h2 id="插件的安装">插件的安装</h2>
<p>原始的方式是直接clone插件代码，如今vim有很多插件管理器可供选择，你可以选择一个顺手的使用</p>
<p>常见的有<code>vim-plug,</code>、<code>Vundle</code>、 <code>Pathogen</code>、<code> Dein.Vim</code>、<code>volt</code>等</p>
<p>综合性能、 易用性、文档等几个方面，这里推荐使用<code>vim-plug</code></p>
<h3 id="vim-plug的安装">vim-plug的安装</h3>
<p>进入vim-plug插件的github仓库：https://github.com/junegunn/vim-plug</p>
<p>根据文档内容，在终端输入命令安装vim-plug：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -fLo ~/.vim/autoload/plug.vim --create-dirs <span class="se">\
</span><span class="se"></span>    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
</code></pre></td></tr></table>
</div>
</div><p>如果使用的是Neovim，则使用以下命令：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs <span class="se">\
</span><span class="se"></span>    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
</code></pre></td></tr></table>
</div>
</div><h3 id="vim-plug的使用">vim-plug的使用</h3>
<h4 id="编写配置文件">编写配置文件</h4>
<p>在<code>.vimrc</code>文件内写入一行<code>call plug#begin()</code>，指定插件安装的目录</p>
<p>然后在中间列出要安装的插件，格式为<code>Plug 'xxx'</code>，注意插件名称前后必须使用单引号</p>
<p>最后在结尾加上一行<code>call plug#end()</code>就可以安装插件了</p>
<p>可以参考文档给出的示例进行编写：</p>
<pre><code>&quot; Specify a directory for plugins：指定一个插件目录
&quot; - For Neovim: stdpath('data') . '/plugged'
&quot; - Avoid using standard Vim directory names like 'plugin'：避免使用标准的Vim目录名称，例如“插件”
call plug#begin('~/.vim/plugged')

&quot; Make sure you use single quotes：确保使用单引号
&quot; 列出要安装的插件，例如：
Plug 'mhinz/vim-startify'


&quot; Initialize plugin system：初始化插件系统
call plug#end()
</code></pre><blockquote>
<p>这里起作用的代码其实就三行：<code>call plug#begin('~/.vim/plugged')</code>、<code>Plug 'mhinz/vim-startify'</code>和<code>call plug#end()</code></p>
</blockquote>
<h4 id="安装第一个vim插件">安装第一个vim插件</h4>
<p>我们将安装vim-startify，一个好用的vim开屏插件：<a href="https://github.com/mhinz/vim-startify">vim-startify</a></p>
<p>根据仓库内的文档教程，修改你的.<code>vimrc</code>文件，增加该插件名称：<code>Plug 'mhinz/vim-startify'</code></p>
<p>重新启动Vim或者使用<code>:source ~/.vimrc</code> ，然后执行<code>:PlugInstall</code>就可以开始安装插件了</p>
<p>安装完成后，回到终端重新启动vim就可以看到该插件的效果了，其他插件的安装方式也都类似</p>
<blockquote>
<p>Vim插件网站：https://vimawesome.com/</p>
</blockquote>]]></description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://niconya.github.io/tags/vim/">Vim</category>
                                
                            
                                
                                
                                
                                    <category domain="https://niconya.github.io/tags/linux/">Linux</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Linux非root用户 Oh My ZSH 使用攻略</title>
                <link>https://niconya.github.io/posts/linux%E9%9D%9Eroot%E7%94%A8%E6%88%B7oh-my-zsh-%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5/</link>
                <guid isPermaLink="true">https://niconya.github.io/posts/linux%E9%9D%9Eroot%E7%94%A8%E6%88%B7oh-my-zsh-%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5/</guid>
                <pubDate>Fri, 10 Apr 2020 23:45:51 +0800</pubDate>
                
                    <author>djvineh8@gmail.com (NicoNya)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<p><strong>由于<code>oh-my-zsh</code>相关文件是每个用户独有的，不是所有用户共用一份的，在服务器上给root用户配好了oh-my-zsh，但大部分时候要用非root用户操作，用惯了oh-my-zsh，没有这个很难受，打算给自己普通用户也安装一个，搜了很多教程折腾了一晚才配好了，遇到不少问题，打算记录一下。</strong></p>
<h2 id="安装zsh">安装ZSH</h2>
<ul>
<li>
<p><strong>下载解压源码。因为直接apt or yum都需要sudo，所以得下源码编译安装</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1">## 下载源码</span>
wget -O zsh.tar.xz https://sourceforge.net/projects/zsh/files/latest/download
<span class="c1">## 解压</span>
xz -d zsh.tar.xz	<span class="c1">## 解压xz文件，提示xz命令不存在的话安装一下xz</span>
tar -xvf zsh.tar	<span class="c1">## 解压tar文件</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<ul>
<li>
<p><strong>配置和安装</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">./configure --prefix<span class="o">=</span><span class="nv">$HOME</span>/usr/
make
make install
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p><strong>第一条命令执行过程中可能会出现这个问题：</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">configure: error: <span class="s2">&#34;No terminal handling library was found on your system. This is probably a library called curses or ncurses. You may need to install a package called &#39;curses-devel&#39; or &#39;ncurses-devel&#39; on your system&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>原因是这个curses-devel或ncurses-devel没有安装，所以还需要找到其中一个的source code编译安装一下：</p>
<p>Ubuntu可以使用<code>libncurses5-dev</code>替代<code>ncurses-devel</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">apt-get install libncurses5-dev
</code></pre></td></tr></table>
</div>
</div><p>CentOS直接安装<code>ncurses-devel</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">yum install ncurses-devel
</code></pre></td></tr></table>
</div>
</div><p><strong>第二步安装过程可能会因为系统没安装gcc或者make编译器而失败，根据提示安装相应编译器再回来操作</strong></p>
</blockquote>
</li>
</ul>
<ul>
<li>
<p><strong>检查是否安装成功。运行下面命令看是否进入zsh shell</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">~/usr/bin/zsh
</code></pre></td></tr></table>
</div>
</div><p>测试无误后输入exit退出zsh</p>
</li>
</ul>
<h2 id="安装oh-my-zsh">安装oh-my-zsh</h2>
<ul>
<li>
<p>**运行安装脚本，如果你在此前尝试过安装Oh My Zsh，务必先删除：**<code>rm -rf ~/.oh-my-zsh</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sh -c <span class="s2">&#34;</span><span class="k">$(</span>wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -<span class="k">)</span><span class="s2">&#34;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>这一步操作时候如果提示<code>Unable to establish SSL connection</code>，先查看是否安装好了<code>openssl</code>，如果没用就尝试直接使用wget禁用SSL验证来获取这个<code>install.sh</code>文件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">wget --no-check-certificate https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh
<span class="c1">## 然后使用以下命令运行该文件</span>
bash install.sh
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>如果这样操作提示没有权限运行<code>/root</code>下的<code>/.oh-my-zsh</code>，则是因为环境变量没有随用户切换而切换</p>
<p>解决办法是<code>ctrl + d</code>退回能最开始的用户，通过<strong><code>su -</code></strong>切换用户</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">su - 用户名
<span class="c1">## 查看一下</span>
<span class="nb">echo</span> <span class="nv">$ZSH</span>
<span class="c1">## 没有输出东西的话就可以接着运行bash install.sh命令了</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>su 用户 ：只切换身份</p>
<p>su - 用户 ：身份和shell（包含环境变量）都切换</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p><strong>无论你是怎样得到并运行</strong><code>install.sh</code><strong>的，只要得到下列结果就表明安装成功：</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">         __                                     __
  ____  / /_     ____ ___  __  __   ____  _____/ /_
 / __ <span class="se">\/</span> __ <span class="se">\ </span>  / __ <span class="sb">`</span>__ <span class="se">\/</span> / / /  /_  / / ___/ __ <span class="se">\
</span><span class="se"></span>/ /_/ / / / /  / / / / / / /_/ /    / /_<span class="o">(</span>__  <span class="o">)</span> / / /
<span class="se">\_</span>___/_/ /_/  /_/ /_/ /_/<span class="se">\_</span>_, /    /___/____/_/ /_/
                        /____/                       ....is now installed!
  
  
Please look over the ~/.zshrc file to <span class="k">select</span> plugins, themes, and options.
  
p.s. Follow us at https://twitter.com/ohmyzsh.
  
p.p.s. Get stickers and t-shirts at https://shop.planetargon.com.
</code></pre></td></tr></table>
</div>
</div><p>运行<code>exec $HOME/usr/bin/zsh</code>检查是否正常</p>
</li>
<li>
<p><strong>更改默认shell</strong></p>
<p><strong>因为没有root权限所以chsh用不了，只能修改.bashrc文件来实现功能，末尾追加已下语句</strong></p>
<pre><code># use zsh
exec $HOME/usr/bin/zsh
</code></pre><p><strong>运行<code>exec $HOME/usr/bin/zsh</code>确认shell没问题</strong>，然后<code>source ~/.bashrc</code></p>
<p>不然会导致直接断开ssh连接，而且重新ssh也会导致断开连接。</p>
</li>
<li>
<p><strong>如果真出现ssh上不去的情况，可以运行下面代码试试：</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">ssh -t username@hostname /bin/bash
<span class="c1"># 或者</span>
ssh username@hostname <span class="s2">&#34;bash --noprofile --norc&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>之后恢复原来的.bashrc文件即可</p>
</li>
</ul>
<blockquote>
<p>参考链接：</p>
<p><a href="https://harttle.land/2016/10/25/install-oh-my-zsh-locally.html">没有 Root 权限 Oh My Zsh 使用攻略</a></p>
<p><a href="%5Bhttps://lingan1996.github.io/Linux%E9%9D%9Eroot%E7%94%A8%E6%88%B7%E5%AE%89%E8%A3%85zsh%E5%92%8Coh-my-zsh/%5D(https://lingan1996.github.io/Linux%E9%9D%9Eroot%E7%94%A8%E6%88%B7%E5%AE%89%E8%A3%85zsh%E5%92%8Coh-my-zsh/)">Linux非root用户安装zsh和oh-my-zsh</a></p>
<p><a href="https://blog.csdn.net/KBellX/article/details/80574192">安装oh-my-zsh报错could not create work tree dir '/root/.oh-my-zsh'.: Permission denied的原因&amp;解决办法</a></p>
</blockquote>]]></description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://niconya.github.io/tags/wsl/">WSL</category>
                                
                            
                                
                                
                                
                                    <category domain="https://niconya.github.io/tags/linux/">Linux</category>
                                
                            
                                
                                
                                
                                    <category domain="https://niconya.github.io/tags/zsh/">ZSH</category>
                                
                            
                                
                                
                                
                                    <category domain="https://niconya.github.io/tags/oh-my-zsh/">oh-my-zsh</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>使用LxRunOffline自定义配置WSL，在Windows下拥有你的完美Linux子系统</title>
                <link>https://niconya.github.io/posts/%E4%BD%BF%E7%94%A8lxrunoffline%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AEwsl%E5%9C%A8windows%E4%B8%8B%E6%8B%A5%E6%9C%89%E4%BD%A0%E7%9A%84%E5%AE%8C%E7%BE%8Elinux%E5%AD%90%E7%B3%BB%E7%BB%9F/</link>
                <guid isPermaLink="true">https://niconya.github.io/posts/%E4%BD%BF%E7%94%A8lxrunoffline%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AEwsl%E5%9C%A8windows%E4%B8%8B%E6%8B%A5%E6%9C%89%E4%BD%A0%E7%9A%84%E5%AE%8C%E7%BE%8Elinux%E5%AD%90%E7%B3%BB%E7%BB%9F/</guid>
                <pubDate>Thu, 09 Apr 2020 22:48:25 +0800</pubDate>
                
                    <author>djvineh8@gmail.com (NicoNya)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<p><strong>作为一名开发人员很多时候需要Linux环境，但是由于日常开发也不能抛弃Windows，双系统来回切换很是麻烦，用虚拟机又会有性能损耗，直到知道了WSL (Win­dows Sub­sys­tem for Linux) ，现在微软对WSL的支持越来越好，Hyper-v技术的使用使得在win10上运行Linux越来方便。</strong></p>
<p><strong>由于在Microsoft Stroe安装WSL的默认安装路径是系统盘，为了避免后期使用不撑爆系统盘，可以把WSL整个安装目录进行转移：使用</strong><code>wsl --export</code> <strong>和</strong> <code>wsl --import</code><strong>这两个命令对WLS进行打包再自定义目录安装。这本来基本是相当完美的解决方案了，但还有另外一款非常实用的WSL管理软件：<a href="https://p3terx.com/go/aHR0cHM6Ly9naXRodWIuY29tL0REb1NvbGl0YXJ5L0x4UnVuT2ZmbGluZQ==">LxRunOffline</a>，它可以将任何Linux发行版本安装到任何目录上，备份、转移和恢复已安装的WSL目录，设置默认用户和修改环境变量等操作，总之就是非常牛牛，完全可以替代</strong><code>wsl</code>、<code>wslconfig</code><strong>这些原生的管理命令。</strong></p>
<h2 id="启用-wsl">启用 WSL</h2>
<p><strong>如果你没有使用过WSL，需要先做如下准备：</strong></p>
<ul>
<li>打开windows设置，搜索开发者设置，启用开发人员模式，如果不进行这步操作，之后可能不能使用LxRunOffline的命令</li>
</ul>
<p><img src="https://i.loli.net/2020/04/09/TdZLAQGfaD4lOP8.png" alt="启用开发者模式.png" style="zoom: 80%;" /></p>
<ul>
<li>可以通过以下两种方式启用 WSL：
<ol>
<li>使用管理员权限打开 Powershell，执行 <code>Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</code></li>
<li>进入“控制面板”——双击“程序和功能”——点击左侧的“启用或关闭 Windows 功能”——勾中“适用于 Linux 的 Windows 子系统”——点击“确定”按钮。</li>
</ol>
</li>
</ul>
<p><img src="https://i.loli.net/2020/04/09/vMaY87pwemV1osz.png" alt="启用WSL.png"></p>
<h2 id="下载-linux发行版系统docker-镜像">下载 Linux发行版系统Docker 镜像</h2>
<h3 id="centos系统下载方式">CentOS系统下载方式</h3>
<ol>
<li>访问 CentOS 的官方 Docker 镜像网站：<a href="https://github.com/CentOS/sig-cloud-instance-images">CentOS Cloud SIG image repository.</a>；</li>
<li>切换到自己想要的分支，比如：<a href="https://github.com/CentOS/sig-cloud-instance-images/tree/CentOS-7-x86_64">CentOS-7-x86_64</a>；</li>
<li>进入 docker 目录，下载centos-*-docker.tar.xz文件，比如：<a href="https://github.com/CentOS/sig-cloud-instance-images/raw/CentOS-7-x86_64/docker/centos-7-x86_64-docker.tar.xz">centos-7-x86_64-docker.tar.xz</a>；</li>
</ol>
<h3 id="ubuntu系统下载方式">Ubuntu系统下载方式</h3>
<ol>
<li>下载 <a href="https://p3terx.com/go/aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvd2luZG93cy93c2wvaW5zdGFsbC1tYW51YWw=">WSL 官方离线包</a>，改后缀名为，使用解压缩软件解压后可得到名为 <code>install.tar.gz</code> 的文件。</li>
<li>或者在 <a href="https://p3terx.com/go/aHR0cHM6Ly9naXRodWIuY29tL0REb1NvbGl0YXJ5L0x4UnVuT2ZmbGluZS93aWtp">LxRunOffline WiKi</a> 中下载大佬们提供的镜像文件。</li>
</ol>
<h2 id="安装-chocolatey">安装 Chocolatey</h2>
<p><a href="https://chocolatey.org/">Chocolatey</a> 是 Win­dows 环境下的包管理器，其作用等同于 Mac OS 的 Brew，Ubuntu 的 apt，Cen­tOS 的 yum。具体的安装方法参见<a href="https://chocolatey.org/install">官方文档</a>。
在具有管理员权限的 Pow­er­shell 中执行下列命令：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">Set-ExecutionPolicy Bypass -Scope Process -Force<span class="p">;</span> iex <span class="o">((</span>New-Object System.Net.WebClient<span class="o">)</span>.DownloadString<span class="o">(</span><span class="s1">&#39;https://chocolatey.org/install.ps1&#39;</span><span class="o">))</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="安装-lxrunoffline">安装 LxRunOffline</h2>
<p>与微软商店的安装方式不同，LxRunOf­fline 安装 WSL 更灵活，它可以安装任意发行版到任意目录，还可以自定义 WSL 名称。</p>
<p>继续在 Pow­er­shell 中执行下列命令：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">choco install LxRunOffline
</code></pre></td></tr></table>
</div>
</div><h2 id="使用-lxrunoffline-安装你的linux发行版系统">使用 LxRunOffline 安装你的Linux发行版系统</h2>
<p>继续在 Pow­er­shell 中执行下列命令：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">LxRunOffline install -n &lt;WSL名称&gt; -d &lt;安装系统的路径&gt; -f &lt;镜像文件路径&gt;<span class="se">\x</span>xx.tar.gz -s
</code></pre></td></tr></table>
</div>
</div><p>其中：</p>
<ul>
<li><code>-n </code>是安装的系统名称，可自定义；</li>
<li><code>-d</code> 是安装系统的目录；</li>
<li><code>-f </code>是之前下载的镜像文件路径；</li>
<li>另外加入<code>-s</code>参数可在桌面创建快捷方式，可以不加。</li>
</ul>
<h2 id="启动你的linux发行版系统">启动你的Linux发行版系统</h2>
<p><strong>可以用以下方式启动：</strong></p>
<h3 id="原生启动wsl">原生启动WSL</h3>
<ul>
<li>
<p>查看已安装的发行版本</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">wsl -l						//列出当前已经安装的开发版
wslconfig /list				//列出当前已经安装且随时可用的发行版
wslconfig /list /all		//列出所有发行版，包括正在安装、卸载和已损坏的发行版
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><strong>运行指定 WSL</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">wsl -d &lt;WSL名称&gt;
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><strong>设置默认 WSL</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">wsl -s &lt;WSL名称&gt;
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="使用-lxrunoffline-运行-wsl">使用 LxRunOffline 运行 WSL</h3>
<p>和原生运行方式本质上是一样的。</p>
<ul>
<li>
<p><strong>创建快捷方式</strong></p>
<p>使用微软应用商店安装的 WSL 会在开始菜单添加应用图标（快捷方式），而使用 LxRunOf­fline 安装 WSL 时可以通过添加 <code>-s</code> 参数在桌面创建快捷方式。如果你安装时忘记添加参数，可以使用以下命令进行创建。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">LxRunOffline s -n &lt;WSL名称&gt; -f &lt;快捷方式路径&gt;.lnk
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><strong>使用命令运行指定 WSL</strong></p>
<p>在有多个 WSL 的情况下，可以指定运行某个发行版。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">LxRunOffline run -n &lt;WSL名称&gt;
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>等同于<code>wsl -d </code></p>
</blockquote>
</li>
<li>
<p><strong>设置默认 WSL</strong></p>
<p>设置默认 WSL 后，可以在 <code>cmd</code> 和 <code>powershell</code> 中输入 <code>wsl</code> 直接调用默认的 WSL 。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">LxRunOffline sd -n &lt;WSL名称&gt;
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>等同于<code>wsl -s </code></p>
</blockquote>
</li>
</ul>
<p>按照上述步骤，你就拥有了一个可以任意折腾的Linux子系统了。</p>
<h2 id="使用-lxrunoffline-设置默认用户">使用 LxRunOffline 设置默认用户</h2>
<p>当修改过 WSL 的名称或目录后就无法通过<a href="https://p3terx.com/go/aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvd2luZG93cy93c2wvdXNlci1zdXBwb3J0">微软官方提供的方法</a>设置默认用户。这时可以使用 LxRunOf­fline 进行设置。</p>
<h3 id="设置普通用户为默认用户">设置普通用户为默认用户</h3>
<p>使用 LxRunOf­fline 新安装的 WSL 默认是以 root 用户登录，如果你需要默认以普通用户进行登录，就需要进行下面的操作。</p>
<p>首先运行 WSL ，输入以下命令创建用户：</p>
<pre><code class="language-none" data-lang="none">useradd -m -s /bin/bash &lt;用户名&gt;
</code></pre><p>然后对该用户设置密码，输入命令后会提示输入两次密码。</p>
<pre><code class="language-none" data-lang="none">passwd &lt;用户名&gt;
</code></pre><p>授予该用户 sudo 权限。</p>
<pre><code class="language-none" data-lang="none">usermod -a -G sudo &lt;用户名&gt;
</code></pre><blockquote>
<p>为了保持和微软商店安装的效果一致，这里提及的方法是把用户添加到 sudo 用户组。其他关于 sudo 权限的设置方法以及免密设置可参考《<a href="https://p3terx.com/archives/linux-grants-normal-user-sudo-permission.html">Linux 中授予普通用户 sudo 权限的正确方法</a>》这篇文章。</p>
</blockquote>
<p>查看用户 UID ，一般是 <code>1000</code>。</p>
<pre><code class="language-none" data-lang="none">id -u &lt;用户名&gt;
</code></pre><p>按 <code>Ctrl</code>+<code>D</code> 退出 WSL ，在 Pow­er­Shell 中输入以下命令：</p>
<pre><code class="language-none" data-lang="none">LxRunOffline su -n &lt;WSL名称&gt; -v 1000
</code></pre><h3 id="设置-root-为默认用户">设置 root 为默认用户</h3>
<p>root 用户的 UID 为 <code>0</code>，所以可以直接在 Pow­er­Shell 输入以下命令进行设置：</p>
<pre><code class="language-none" data-lang="none">LxRunOffline su -n &lt;WSL名称&gt; -v 0
</code></pre><h2 id="使用-lxrunoffline-转移-wsl-安装目录">使用 LxRunOffline 转移 WSL 安装目录</h2>
<p>LxRunOf­fline 可以对系统中已经安装的 WSL 进行目录转移操作，拯救爆满的 C 盘。</p>
<p>查看系统中已安装的 WSL 。</p>
<pre><code class="language-none" data-lang="none">LxRunOffline l
</code></pre><blockquote>
<p>类似于<code>wsl -l</code>。LxRunOf­fline 不会显示默认 WSL ，查看默认 WSL 需要使用 <code>lxrunoffline gd</code>命令。</p>
</blockquote>
<p>输入命令对 WSL 的目录进行移动。</p>
<pre><code class="language-none" data-lang="none">LxRunOffline m -n &lt;WSL名称&gt; -d &lt;路径&gt;
</code></pre><p>最后查看路径，进行确认。</p>
<pre><code class="language-none" data-lang="none">LxRunOffline di -n &lt;WSL名称&gt;
</code></pre><h2 id="使用-lxrunoffline-备份和恢复-wsl">使用 LxRunOffline 备份和恢复 WSL</h2>
<p>使用 LxRunOf­fline 可以方便的对 WSL 进行备份和恢复，同样可以实现转移的操作，而且还可以在转移到其它电脑上。</p>
<h3 id="备份-wsl">备份 WSL</h3>
<p>查看系统中已安装的 WSL 。</p>
<pre><code class="language-none" data-lang="none">wsl -l
</code></pre><p>然后输入需要备份的 WSL 名称和备份的目标路径。</p>
<pre><code class="language-none" data-lang="none">LxRunOffline e -n &lt;WSL名称&gt; -f &lt;压缩包路径&gt;.tar.gz
</code></pre><blockquote>
<p>类似但不等同于<code>wsl --export  &lt;压缩包路径&gt;.tar</code>。LxRunOf­fline 备份完会生成一个<code>.xml</code>后缀的同名配置文件，比如<code>WSL.tar.gz.xml</code>。</p>
</blockquote>
<h3 id="恢复-wsl">恢复 WSL</h3>
<p>输入以下命令可以恢复已备份的 WSL，和安装是相同的命令。</p>
<pre><code class="language-none" data-lang="none">LxRunOffline i -n &lt;WSL名称&gt; -d &lt;安装路径&gt; -f &lt;压缩包路径&gt;.tar.gz
</code></pre><blockquote>
<p>类似但不等同于<code>wsl --import  &lt;安装路径&gt; &lt;压缩包路径&gt;.tar</code>。LxRunOf­fline 会读取备份时生成的配置文件并写入配置，前提是同目录且同名。否则你需要加入<code>-c</code>参数指定配置文件。</p>
</blockquote>
<h2 id="使用-lxrunoffline-修改-wsl-名称">使用 LxRunOffline 修改 WSL 名称</h2>
<p>查看 WSL 名称。</p>
<pre><code class="language-none" data-lang="none">wsl -l
</code></pre><p>查看 WSL 安装目录。</p>
<pre><code class="language-none" data-lang="none">LxRunOffline di -n &lt;WSL名称&gt;
</code></pre><p>导出指定的 WSL 配置文件到目标路径。</p>
<pre><code class="language-none" data-lang="none">LxRunOffline ec -n &lt;WSL名称&gt; -f &lt;配置文件路径&gt;.xml
</code></pre><blockquote>
<p>配置信息可以输入<code>lxrunoffline sm -n </code>查看</p>
</blockquote>
<p>取消注册（这个操作不会删除目录）</p>
<pre><code class="language-none" data-lang="none">LxRunOffline ur -n &lt;WSL名称&gt;
</code></pre><p>使用新名称注册</p>
<pre><code class="language-none" data-lang="none">LxRunOffline rg -n &lt;WSL名称&gt; -d &lt;WSL路径&gt; -c &lt;配置文件路径&gt;.xml
</code></pre><h2 id="卸载已安装的wsl">卸载已安装的WSL</h2>
<h3 id="原生卸载">原生卸载</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">wslconfig /unregister &lt;wsl名称&gt;
</code></pre></td></tr></table>
</div>
</div><h3 id="使用-lxrunoffline-卸载wsl">使用 LxRunOffline 卸载WSL</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">LxRunOffline uninstall -n &lt;wsl名称&gt;
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p><strong>参考链接：</strong></p>
<p><a href="https://p3terx.com/archives/manage-wsl-with-lxrunoffline.html">LxRunOffline 使用教程 - WSL 自定义安装、备份</a></p>
<p><a href="https://github.com/DDoSolitary/LxRunOffline">https://github.com/DDoSolitary/LxRunOffline</a></p>
</blockquote>]]></description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://niconya.github.io/tags/wsl/">WSL</category>
                                
                            
                                
                                
                                
                                    <category domain="https://niconya.github.io/tags/linux/">Linux</category>
                                
                            
                                
                                
                                
                                    <category domain="https://niconya.github.io/tags/lxrunoffline/">LxRunOffline</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>使用MacType，让Windows的字体变得更漂亮</title>
                <link>https://niconya.github.io/posts/%E4%BD%BF%E7%94%A8mactype%E8%AE%A9windows%E7%9A%84%E5%AD%97%E4%BD%93%E5%8F%98%E5%BE%97%E6%9B%B4%E6%BC%82%E4%BA%AE/</link>
                <guid isPermaLink="true">https://niconya.github.io/posts/%E4%BD%BF%E7%94%A8mactype%E8%AE%A9windows%E7%9A%84%E5%AD%97%E4%BD%93%E5%8F%98%E5%BE%97%E6%9B%B4%E6%BC%82%E4%BA%AE/</guid>
                <pubDate>Sun, 22 Mar 2020 22:00:15 +0800</pubDate>
                
                    <author>djvineh8@gmail.com (NicoNya)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<p>如何改善 Windows 的字体渲染是一个亘古不变的话题，长期以来大家都有这样的一个印象：Windows 上面的字体渲染相比 MacOS 没有那么细腻清晰，默认的字体时不时以点阵形式出现戳瞎双眼。</p>
<p>实际上，也确实是这个样子，由于 Windows 世界中参差不齐的硬件和向前兼容的「历史包袱」，Windows 新 UI 和新的渲染模式需要去兼容老旧的程序，往往也正是因为这些程序，给 Windows 用户「字体渲染模糊不清」的体验。</p>
<h2 id="关于-mactype">关于 MacType</h2>
<p>MacType 是由 FlyingSnow 延续 GDI++ 开源专案的字体渲染软体，直白的说就是替 Windows 的使用者在网页浏览、系统界面、一般程式中呈现更好看的字体显示效果，其能一直无障碍兼容到最近的 Windows 10 。MacType 给 Windows 用户带来了优良的字体显示效果，也使得我们能够「热替换」系统默认字体而无需修改系统文件。</p>
<p>诚如前面提到 MacType 是延续 GDI++ 开源专案而来，局限当然就是只能渲染 GDI+ 的程序。所以对 Windows 7 之后，采用微软开发的新字体渲染引擎 DirectWrite 方案的程序像是微软自己的 UWP APP、Office 系列程式一直没有直接的解决办法，最大众化的差异就体现在 Chrome 52 版拿掉禁止 DirectWrite 功能后，呈现出一片模糊的效果。但这在 Firefox 上不是问题。</p>
<h2 id="软件下载">软件下载</h2>
<p>建议去Github仓库<code>Release</code>页面下载最新版本软件</p>
<blockquote>
<p>MacType下载地址：
官网：https://www.mactype.net/
Github：https://github.com/snowie2000/MacType
noMeiryoUI下载地址：
官网：http://tatsu.life.coocan.jp/MySoft/WinCust/index.html
Github：https://github.com/Tatsu-syo/noMeiryoUI</p>
</blockquote>
<h2 id="安装配置">安装配置</h2>
<p>首先下载MacType，按照提示一步步安装即可，安装完成后打开会自动进入配置MacType有注册表、服务、MacTray托盘三种加载模式，建议使用<code>MacTray托盘加载 -&gt; 独立加载模式</code>方式下一步选择配置，这里我喜欢使用<code>XMac</code>中的<code>XMac.LCD.Default</code>配置。</p>
<p><img src="https://i.loli.net/2020/03/22/HRNAZC5WpxVMh8B.png" alt="用户向导.png"></p>
<p>下一步选择配置，这里我喜欢使用<code>XMac</code>中的<code>XMac.LCD.Default</code>配置</p>
<p><img src="https://i.loli.net/2020/03/22/nkIMXofVl4pibDy.png" alt="选择配置文件.png"></p>
<p>配置完成后，即可开始享受一个字体渲染愉快的 Windows 了。实际上 MacType 使用过程你会遇到各种毛病，如 一些软件不能渲</p>
<p>染，一些用宋体的软件渲染起来很难看，就需要替换系统的宋体。</p>
<h2 id="修改系统字体">修改系统字体</h2>
<p>运行<code>noMeiryoUI</code>，选择字体，设定全部</p>
<p><img src="https://i.loli.net/2020/03/22/KEPIvCm5oTHxXc1.png" alt="noMeiryoUI界面.png"></p>
<p><strong>我这里推荐这个字体：</strong><a href="https://github.com/be5invis/Sarasa-Gothic/">Sarasa Gothic / 更纱黑体 / 更紗黑體 / 更紗ゴシック</a><strong>。更纱黑体是一个在 100% 缩放比例下同样有着优秀的显示效果的字体。在</strong> <a href="https://github.com/be5invis/Sarasa-Gothic/releases">这里</a> <strong>可以下载到最新的</strong> <code>ttf</code> <strong>字体，安装之后会得到几个字体，其中我们需要的就是「更纱黑体 UISC」，即「Sarasa UI SC」。（SC 代表 Simplified Chinese，简体中文。）</strong></p>
<h2 id="排除冲突进程">排除冲突进程</h2>
<p>需要注意的是，部分应用可能会与 MacType 渲染存在冲突（例如 MacType 会影响 Office 2016 的安装失败），这时我们需要使用通</p>
<p>过排除进程来使应用正常工作。</p>
<p>打开 MacType 安装目录下的 <code>MacType.ini</code> 中添加以下内容：</p>
<pre><code>[UnloadDll]
sample1.exe
sample2.exe
sample3.exe
</code></pre><p>将其中 <code>sample*.exe</code> 替换为所需排除的程序名即可。另外需要注意的是若使用「注册表加载模式」，配置文件的变更需要重启才能生效。</p>
<h2 id="显示效果对比">显示效果对比</h2>
<p><img src="https://i.loli.net/2020/03/22/Nqzn3j9kJrIKEie.png" alt="win10字体渲染对比.png"></p>
<h1 id="改善chrome字体渲染效果">改善Chrome字体渲染效果</h1>
<h2 id="修改chrome字体设置">修改Chrome字体设置</h2>
<p>打开chrome，进入<code>设置</code><strong>→</strong><code>外观</code><strong>→</strong><code>自定义字体</code></p>
<p><img src="https://i.loli.net/2020/03/22/h1RCXUxBS8q5wfm.png" alt="Chrome字体设置.png"></p>
<p>这里我是使用了Chrome推荐的字体设置插件<code>Advanced Font Settings</code>来修改的字体，在<a href="https://chrome.google.com/webstore/detail/advanced-font-settings/caclkomlalccbpcdllchkeecicepbmbm">这里</a>可以下载安装这个扩展程序Advanced Font Settings 是一个chrome扩展，按理来说浏览器或系统也有自己的字体设置，但是这个Advanced Font Settings更加贴心一点，它可以按照英文、中文等等分开设置。可以在<a href="https://juejin.im/entry/59b8f1a76fb9a00a59593b37">这里</a>了解该插件更多的内容。</p>
<p><img src="https://i.loli.net/2020/03/22/Jhjs5noFLG4Zdup.png" alt="Chrome高级字体设置.png"></p>
<p>此时将字体换为更纱黑体之后, 显示效果并不是很好，此时需要结合油猴插件<code>质感字体&amp;&amp;页面平滑滚动</code>增强字体的显示效果，</p>
<p>脚本安装地址：http://suo.im/61ZO1o</p>
<h2 id="显示效果对比-1">显示效果对比</h2>
<p><img src="https://i.loli.net/2020/03/22/IfJnjq9ACp5RLkY.png" alt="chrome字体渲染对比.png"></p>
<blockquote>
<p><strong>参考链接：</strong></p>
<p><a href="https://hacpai.com/article/1565314286880">MacType 美化 Windows10 字体，体验类 Mac 顺滑字体</a></p>
<p><a href="https://blog.csdn.net/qq_36852780/article/details/104869572">win10字体显示Mac效果+Chrome字体效果增强</a></p>
<p>[Win10 Mactype 字体优化](</p>
</blockquote>]]></description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://niconya.github.io/tags/mactype/">MacType</category>
                                
                            
                                
                                
                                
                                    <category domain="https://niconya.github.io/tags/%E5%AD%97%E4%BD%93%E6%B8%B2%E6%9F%93/">字体渲染</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>IDEA显示Run Dashboard窗口</title>
                <link>https://niconya.github.io/posts/idea%E6%98%BE%E7%A4%BArun-dashboard%E7%AA%97%E5%8F%A3/</link>
                <guid isPermaLink="true">https://niconya.github.io/posts/idea%E6%98%BE%E7%A4%BArun-dashboard%E7%AA%97%E5%8F%A3/</guid>
                <pubDate>Thu, 14 Nov 2019 21:10:43 +0800</pubDate>
                
                    <author>djvineh8@gmail.com (NicoNya)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<p>默认情况下，IDEA的Run Dashboard是关闭的，当检测到你有多个springboot项目时会弹出提示框，询问是否打开</p>
<p>但是如果没有提醒，就需要自己配置了：</p>
<h2 id="方法一">方法一：</h2>
<p>工具栏中依次打开<code>View</code>-》<code>Tool Windows</code>-》<code>Run Dashboard</code></p>
<p>如果上述的选项里没有Run Dashboard，使用方法二</p>
<h2 id="方法二">方法二</h2>
<p>找到工程目录中<code>.idea</code>文件夹下的<code>workspace.xml</code>，打开，接下来找到</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-xml" data-lang="xml"><span class="nt">&lt;component</span> <span class="na">name=</span><span class="s">&#34;RunDashboard&#34;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;option</span> <span class="na">name=</span><span class="s">&#34;ruleStates&#34;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;list&gt;</span>
            <span class="nt">&lt;RuleState&gt;</span>
                <span class="nt">&lt;option</span> <span class="na">name=</span><span class="s">&#34;name&#34;</span> <span class="na">value=</span><span class="s">&#34;ConfigurationTypeDashboardGroupingRule&#34;</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;/RuleState&gt;</span>
            <span class="nt">&lt;RuleState&gt;</span>
                <span class="nt">&lt;option</span> <span class="na">name=</span><span class="s">&#34;name&#34;</span> <span class="na">value=</span><span class="s">&#34;StatusDashboardGroupingRule&#34;</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;/RuleState&gt;</span>
        <span class="nt">&lt;/list&gt;</span>
    <span class="nt">&lt;/option&gt;</span>
<span class="nt">&lt;/component&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>在其中加入一个如下的<option></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-xml" data-lang="xml"><span class="nt">&lt;component</span> <span class="na">name=</span><span class="s">&#34;RunDashboard&#34;</span><span class="nt">&gt;</span>
    <span class="c">&lt;!-- 加入此项 --&gt;</span>
    <span class="nt">&lt;option</span> <span class="na">name=</span><span class="s">&#34;configurationTypes&#34;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;set&gt;</span>
            <span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&#34;SpringBootApplicationConfigurationType&#34;</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;/set&gt;</span>
    <span class="nt">&lt;/option&gt;</span>
    
    <span class="nt">&lt;option</span> <span class="na">name=</span><span class="s">&#34;ruleStates&#34;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;list&gt;</span>
            <span class="nt">&lt;RuleState&gt;</span>
                <span class="nt">&lt;option</span> <span class="na">name=</span><span class="s">&#34;name&#34;</span> <span class="na">value=</span><span class="s">&#34;ConfigurationTypeDashboardGroupingRule&#34;</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;/RuleState&gt;</span>
            <span class="nt">&lt;RuleState&gt;</span>
                <span class="nt">&lt;option</span> <span class="na">name=</span><span class="s">&#34;name&#34;</span> <span class="na">value=</span><span class="s">&#34;StatusDashboardGroupingRule&#34;</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;/RuleState&gt;</span>
        <span class="nt">&lt;/list&gt;</span>
    <span class="nt">&lt;/option&gt;</span>
<span class="nt">&lt;/component&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>重启项目，Run Dashboard窗口就会显示出来了</p>]]></description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://niconya.github.io/tags/idea/">IDEA</category>
                                
                            
                                
                                
                                
                                    <category domain="https://niconya.github.io/tags/springboot/">SpringBoot</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>AJAX总结--JS原生Ajax &amp; jQuery Ajax</title>
                <link>https://niconya.github.io/posts/ajax%E6%80%BB%E7%BB%93/</link>
                <guid isPermaLink="true">https://niconya.github.io/posts/ajax%E6%80%BB%E7%BB%93/</guid>
                <pubDate>Sun, 22 Sep 2019 14:25:15 +0800</pubDate>
                
                    <author>djvineh8@gmail.com (NicoNya)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<h2 id="原生ajax">原生Ajax</h2>
<h3 id="get请求流程">get请求流程</h3>
<ul>
<li>
<p>创建ajax请求对象：</p>
<p>大多数浏览器为<code>XMLHTTPRequest()</code>，高版本IE浏览器为<code>ActiveXObject(&quot;Msxml2.XMLHTTP&quot;)</code>，低版本IE浏览器为<code>ActiveXObject(&quot;Microsoft.XMLHTTP&quot;)</code></p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript">  <span class="kd">function</span>  <span class="nx">ajaxFunction</span><span class="p">(){</span>
  	    <span class="kd">var</span> <span class="nx">xmlHttp</span><span class="p">;</span>
  	    <span class="k">try</span><span class="p">{</span> <span class="c1">// Firefox, Chrome, Opera 8.0+, Safari
</span><span class="c1"></span>  	        <span class="nx">xmlHttp</span><span class="o">=</span><span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
  	    <span class="p">}</span>
  	    <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">){</span>
  	        <span class="k">try</span><span class="p">{</span><span class="c1">// Internet Explorer（高版本）
</span><span class="c1"></span>  	            <span class="nx">xmlHttp</span><span class="o">=</span><span class="k">new</span> <span class="nx">ActiveXObject</span><span class="p">(</span><span class="s2">&#34;Msxml2.XMLHTTP&#34;</span><span class="p">);</span>
  	        <span class="p">}</span>
  	        <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">){</span>
  	            <span class="k">try</span><span class="p">{</span><span class="c1">// Internet Explorer（低版本）
</span><span class="c1"></span>  	                <span class="nx">xmlHttp</span><span class="o">=</span><span class="k">new</span> <span class="nx">ActiveXObject</span><span class="p">(</span><span class="s2">&#34;Microsoft.XMLHTTP&#34;</span><span class="p">);</span>
  	            <span class="p">}</span>
  	            <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">){}</span>
  	        <span class="p">}</span>
  	    <span class="p">}</span>
  	    <span class="k">return</span> <span class="nx">xmlHttp</span><span class="p">;</span>
  	<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>使用open方法创建http请求，并设置请求地址</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//执行get请求
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">get</span><span class="p">()</span> <span class="p">{</span>
  
    <span class="c1">//1. 创建xmlhttprequest 对象
</span><span class="c1"></span>    <span class="kd">var</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="nx">ajaxFunction</span><span class="p">();</span>
  
    <span class="c1">//2. 发送请求。
</span><span class="c1"></span>    <span class="cm">/*	
</span><span class="cm">   *	参数一： 请求类型  GET or  POST
</span><span class="cm">   *	参数二： 请求的路径
</span><span class="cm">   *	参数三： 是否异步， true  or false
</span><span class="cm">   */</span>
    <span class="nx">xhr</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s2">&#34;GET&#34;</span> <span class="p">,</span><span class="s2">&#34;TestServlet&#34;</span> <span class="p">,</span><span class="kc">true</span> <span class="p">);</span>
    <span class="nx">xhr</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>如果发送请求的同时，还想获取数据，那么代码如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//执行get请求
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">get</span><span class="p">()</span> <span class="p">{</span>
  
    <span class="c1">//1. 创建xmlhttprequest 对象
</span><span class="c1"></span>    <span class="kd">var</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="nx">ajaxFunction</span><span class="p">();</span>
  
    <span class="c1">//2. 设置请求参数
</span><span class="c1"></span>    <span class="nx">xhr</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s2">&#34;GET&#34;</span> <span class="p">,</span><span class="s2">&#34;TestServlet?name=aa&amp;age=18&#34;</span> <span class="p">,</span><span class="kc">true</span> <span class="p">);</span>
  
    <span class="c1">//3. 获取响应数据 注册监听的意思。  一会准备的状态发生了改变，那么就执行 = 号右边的方法
</span><span class="c1"></span>    <span class="nx">xhr</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
        <span class="c1">// readyState的值一共有5个状态，参见下表
</span><span class="c1"></span>        <span class="c1">// readyState == 4 表示请求已经完成， 再判断状态码是否是200，200表示服务端正常响应(没有报错)
</span><span class="c1"></span>        <span class="k">if</span><span class="p">(</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">==</span> <span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">status</span> <span class="o">==</span> <span class="mi">200</span><span class="p">){</span>
            <span class="c1">//弹出响应的信息
</span><span class="c1"></span>            <span class="nx">alert</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">responseText</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
      
    <span class="c1">// 4. 发送请求
</span><span class="c1"></span>    <span class="nx">xhr</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="post请求流程">post请求流程</h3>
<p>Post请求方式和Get请求基本相同，只是由于post方式传递数据是模仿form表单传递给服务器的,要设置header头协议</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//1. 创建对象
</span><span class="c1">// 和get请求一样
</span><span class="c1"></span>
<span class="kd">function</span> <span class="nx">post</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">//1. 创建请求对象
</span><span class="c1"></span>    <span class="kd">var</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="nx">ajaxFunction</span><span class="p">();</span>

    <span class="c1">// 2. 设置请求地址、参数、类型(post、get)
</span><span class="c1"></span>    <span class="nx">xhr</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s2">&#34;post&#34;</span><span class="p">,</span> <span class="s2">&#34;StudentServlet&#34;</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>

    <span class="c1">//3. 获取响应数据 注册监听的意思。  一会准备的状态发生了改变，那么就执行 = 号右边的方法
</span><span class="c1"></span>    <span class="nx">xhr</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
        <span class="c1">//前半段表示 已经能够正常处理。  再判断状态码是否是200
</span><span class="c1"></span>        <span class="k">if</span><span class="p">(</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">==</span> <span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">status</span> <span class="o">==</span> <span class="mi">200</span><span class="p">){</span>
            <span class="c1">//弹出响应的信息
</span><span class="c1"></span>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;请求完成&#34;</span><span class="p">);</span>
            <span class="kd">var</span> <span class="nx">h1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;h1&#34;</span><span class="p">);</span>
            <span class="nx">h1</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">responseText</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// 4. 如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
</span><span class="c1"></span>    <span class="nx">xhr</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="s2">&#34;Content-Type&#34;</span><span class="p">,</span> <span class="s2">&#34;application/x-www-form-urlencoded&#34;</span><span class="p">);</span>

    <span class="c1">// 5. 发送请求
</span><span class="c1"></span>    <span class="c1">// 如果是GET请求，参数写在这里是无效的
</span><span class="c1"></span>    <span class="nx">xhr</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s2">&#34;id=555&#34;</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="jquery-ajax">jQuery Ajax</h2>
<h3 id="ajax的使用">$.ajax()的使用</h3>
<p>该方法用于执行Ajax请求，<strong>常用于其他jQuery Ajax方法不能完成的请求</strong>，是jQuery中Ajax系列方法的的底层实现，其他方法都是在它的基础上给我们封装的更方便使用的方法。</p>
<p>形式：<code>$.ajax(url, [settings]);</code>
常用字段：</p>
<ul>
<li>
<p><strong>url</strong>：链接地址，字符串</p>
</li>
<li>
<p><strong>type</strong>：<code>“POST&quot;</code>或 <code>“GET&quot;</code>，请求类型</p>
</li>
<li>
<p><strong>data</strong>：需发送到服务器的数据，GET与POST都可以，格式为{A: '...', B: '...'}</p>
</li>
<li>
<p><strong>dataType</strong>：服务器响应的数据类型，字符串表示；当填写为json时，回调函数中无需再对数据反序列化为json</p>
</li>
<li>
<p><strong>success</strong>：请求成功后，服务器回调的函数</p>
</li>
<li>
<p><strong>error</strong>：请求失败后，服务器回调的函数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">(</span><span class="s2">&#34;TestServlet&#34;</span><span class="p">,</span> <span class="p">{</span>
    <span class="nx">type</span><span class="o">:</span> <span class="s2">&#34;GET&#34;</span><span class="p">,</span>
    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">action</span><span class="o">:</span> <span class="s2">&#34;json&#34;</span><span class="p">,</span>
        <span class="nx">uname</span><span class="o">:</span> <span class="s2">&#34;zhangsan&#34;</span>
    <span class="p">},</span>
    <span class="nx">dataType</span><span class="o">:</span> <span class="s2">&#34;json&#34;</span><span class="p">,</span>
    <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">status_text</span><span class="p">){</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;status_text: &#34;</span> <span class="o">+</span> <span class="nx">status_text</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="nx">error</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">xhr</span><span class="p">,</span> <span class="nx">textStatus</span><span class="p">,</span> <span class="nx">errorThrow</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;请求失败&#34;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">});</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="get的使用">$.get()的使用</h3>
<p><code>$.get()</code>方法使用GET方式来进行异步请求，它的语法结构为：</p>
<p><code>$.get(url, data, func, dataType);</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="cm">/*
</span><span class="cm"> * 参数：
</span><span class="cm"> *  url: 请求地址
</span><span class="cm"> *  data: 待发送 Key/value 参数
</span><span class="cm"> *  fn: 请求成功后回调函数
</span><span class="cm"> *  type: 返回内容格式，xml, html, script, json, text, _default
</span><span class="cm"> */</span>

<span class="nx">$</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span> <span class="s2">&#34;url&#34;</span><span class="p">,{</span><span class="nx">pid</span><span class="o">:</span><span class="nx">pid</span><span class="p">}</span> <span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span><span class="nx">status_text</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;status_text: &#34;</span> <span class="o">+</span> <span class="nx">status_text</span><span class="p">);</span>
<span class="p">},</span><span class="s2">&#34;json&#34;</span> <span class="p">);</span>	<span class="c1">// 指定请求返回的格式是json，jquery会帮我们把服务端返回的json字符串转换成js的json对象
</span></code></pre></td></tr></table>
</div>
</div><h3 id="post的使用">$.post()的使用</h3>
<p><code>$.post()</code>方法使用POST方式来进行异步请求，它的语法结构为：</p>
<p><code>$.post(url, data, function, dataType);</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="cm">/*
</span><span class="cm"> * 参数：
</span><span class="cm"> *  url: 请求地址
</span><span class="cm"> *  data: 待发送 Key/value 参数
</span><span class="cm"> *  fn: 请求成功后回调函数
</span><span class="cm"> *  type: 返回内容格式，xml, html, script, json, text, _default
</span><span class="cm"> */</span>

<span class="nx">$</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span> <span class="s2">&#34;url&#34;</span><span class="p">,{</span><span class="nx">pid</span><span class="o">:</span><span class="nx">pid</span><span class="p">}</span> <span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span><span class="nx">status</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;status_text: &#34;</span> <span class="o">+</span> <span class="nx">status_text</span><span class="p">);</span>
<span class="p">},</span><span class="s2">&#34;json&#34;</span> <span class="p">);</span>	<span class="c1">// 指定请求返回的格式是json，jquery会帮我们把服务端返回的json字符串转换成js的json对象
</span></code></pre></td></tr></table>
</div>
</div><h3 id="getjson的使用">$.getJSON();的使用</h3>
<p><code>$.getJSON()</code>是专门为ajax获取json数据而设置的，该方法使用GET方式执行Ajax请求，从服务器加载JSON格式数据，并且支持跨域调用，它的语法结构为：</p>
<p><code>$.getJSON(url, data, func);</code></p>
<p>因为确定服务器返回的是json编码的数据，所以相较于$.get()不用再指定dataType。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">.</span><span class="nx">getJSON</span><span class="p">(</span><span class="s2">&#34;url&#34;</span><span class="p">,</span> <span class="p">{</span><span class="nx">id</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;zhangsan&#34;</span><span class="p">}</span> <span class="kd">function</span><span class="p">(</span><span class="nx">json</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">json</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="以上四个方法的关系和区别">以上四个方法的关系和区别？</h3>
<p><code>$.ajax()</code>是jQuery的底层AJAX实现，<code>$.get()</code>和<code>$.post()</code>是简单易用的jQuery高层AJAX实现</p>
<p><code>$.getJSON()</code>是通过 HTTP GET 请求载入 JSON 数据。</p>]]></description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://niconya.github.io/tags/ajax/">AJAX</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>JavaWeb分页实现总结</title>
                <link>https://niconya.github.io/posts/javaweb%E5%88%86%E9%A1%B5%E5%AE%9E%E7%8E%B0%E6%80%BB%E7%BB%93/</link>
                <guid isPermaLink="true">https://niconya.github.io/posts/javaweb%E5%88%86%E9%A1%B5%E5%AE%9E%E7%8E%B0%E6%80%BB%E7%BB%93/</guid>
                <pubDate>Sun, 22 Sep 2019 14:23:38 +0800</pubDate>
                
                    <author>djvineh8@gmail.com (NicoNya)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<h1 id="基于mysql的查询分页">基于MySQL的查询分页</h1>
<h2 id="物理分页">物理分页</h2>
<p>物理分页是直接使用SQL语句通过数据库的特性查询数据库，实现分页，每次从数据库中获取的数据都仅仅是一页的数据。</p>
<p>物理分页的好处就是效率高。</p>
<p>不好的地方就是不同数据库有不同的搞法，因为要依赖查询语句来查询数据库，所以不同的数据库，使用的分页语句也都不相同。</p>
<p><strong>MySQL中的分页：使用<code>limit</code>关键字</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">student</span> <span class="k">limit</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span>
<span class="c1">-- 表示的是从第0条开始取，取10条数据
</span></code></pre></td></tr></table>
</div>
</div><h2 id="逻辑分页">逻辑分页</h2>
<p>逻辑分页就是一次性把数据查询出来，之所以叫逻辑分页就是因为每次从数据库查询数据时没有做分页，而是将取得的所有数据储存到内存缓存中，每次翻页是在内存中对数据做裁剪，取得数据。</p>
<p>逻辑分页的好处就是翻页的速度快，对于数量量比较小来说很适合，数据量大，最好采用物理分页，防止内存溢出。且逻辑分页并不依赖于数据库来实现，所以所有的数据库逻辑分页实现方案都一样。</p>
<p><strong>逻辑分页方法：</strong></p>
<ul>
<li>根据条件sql查询数据库</li>
<li>得到ResultSet的结果集,由于ResultSet带有游标，因此可以使用其next()方法来指向下一条记录</li>
<li>利用next()方法，得到分页所需的结果集</li>
</ul>
<h2 id="通用的分页参数">通用的分页参数</h2>
<h3 id="参数概览">参数概览</h3>
<ul>
<li>当前页（前端页面传参）</li>
<li>每页条数（前端页面传参）</li>
<li>总条数（从数据库中查询得到）</li>
<li>总页数（由总页数和每页条数计算得知）</li>
<li>每页要展示的数据</li>
</ul>
<h3 id="计算公式">计算公式</h3>
<p>假设数据库使用的是mysql， 第一页从1开始</p>
<ul>
<li>总页数算法： 总条数 / 每页条数， 能整除就用商； 不能整除商+1</li>
<li>取当前页数据
<ul>
<li>开始位置：（当前页 - 1）* 每页条数</li>
<li>结束位置（使用与逻辑分页）：当前页 * 每页条数</li>
<li>取多少条（适用于mysql物理分页）：每页条数</li>
</ul>
</li>
</ul>]]></description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://niconya.github.io/tags/javaweb/">JavaWeb</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Cookie &amp; Session总结</title>
                <link>https://niconya.github.io/posts/cookie-session%E6%80%BB%E7%BB%93/</link>
                <guid isPermaLink="true">https://niconya.github.io/posts/cookie-session%E6%80%BB%E7%BB%93/</guid>
                <pubDate>Fri, 20 Sep 2019 13:16:15 +0800</pubDate>
                
                    <author>djvineh8@gmail.com (NicoNya)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<h2 id="cookie">Cookie</h2>
<h3 id="cookie是什么">Cookie是什么</h3>
<p>Cookie是一种能够让Web服务器把少量数据储存到客户端的硬盘或内存里，或是从客户端的硬盘里读取数据的一种技术。</p>
<h3 id="为什么要使用cookie">为什么要使用Cookie</h3>
<p>因为HTTP协议是一种无状态协议，Http没有保存状态，对每一个请求无法区别每个请求对应的是哪个用户，也无法判定是否是用户已经登录或者是还没登录，所以需要引入一种机制，通过在浏览器中存储一些数据，记录用户的登录状态和保存用户的登录信</p>
<p>息；引入cookie之后，在请求时会把cookie附加到请求头中，这样服务端一读取请求头就知道了这次请求是哪个用户发起的。</p>
<h3 id="什么情况下要使用cookie">什么情况下要使用Cookie</h3>
<p>Cookie的使用分为在业务程序中显式使用和通过容器隐式使用。</p>
<ul>
<li>隐式使用： 首次访问JSP、Servlet时，Servlet容器会自动往响应头中添加一个Cookie(Tomcat中是JSESSIONID)</li>
<li>显式使用： 当我们有一些安全性要求不高，数据量不大的用户数据需要存储时，可以考虑使用Cookie</li>
</ul>
<h3 id="怎么使用cookie">怎么使用Cookie?</h3>
<h4 id="cookie的属性">Cookie的属性</h4>
<p><img src="https://i.loli.net/2019/09/22/2dnR9TPJtLV3Sec.png" alt="cookie.png"></p>
<p>在Chrome浏览器开发者模式中，我们可以看到网站的cookie；
图中可以看到Cookie具有的属性有 Name、value、Domain、path、Expires/Max-Age、Size、HTTP、Secure等。</p>
<ul>
<li>
<p><strong>Name</strong>：该Cookie的名称，一旦创建，名称便不可更改</p>
</li>
<li>
<p><strong>Value</strong>：该Cookie的值，如果值为Unicode字符，需要为字符编码</p>
</li>
<li>
<p><strong>Domain</strong>：可以访问到这个Cookie的域名。如果设置为<code>.google.com</code>,则所有以<code>google.com</code>结尾的域名都可以访问该      Cookie。注意第一个字符必须为<strong><code>.</code></strong></p>
<blockquote>
<p>注：</p>
<p>非顶级域名，如二级域名或者三级域名，设置的cookie的domain只能为顶级域名或者二级域名或者三级域名本身，不能设置其他二级域名的cookie，否则cookie无法生成。</p>
<p>顶级域名只能设置domain为顶级域名，不能设置为二级域名或者三级域名，否则cookie无法生成。</p>
<p>二级域名能读取设置了domain为顶级域名或者自身的cookie，不能读取其他二级域名domain的cookie。所以要想cookie在多个二级域名中共享，需要设置domain为顶级域名，这样就可以在所有二级域名里面或者到这个cookie的值了。</p>
<p>顶级域名只能获取到domain设置为顶级域名的cookie，其他domain设置为二级域名的无法获取。</p>
</blockquote>
</li>
<li>
<p><strong>Path</strong>：可以访问到这个Cookie的页面路径。 比如domain是<code>.goole.com</code>,  path是<code>/TestServlet</code>，那么只有<code>/TestServlet</code> 路径下的页面可以读取此Cookie。</p>
</li>
<li>
<p><strong>Expires/Max-Age:</strong> 该Cookie失效时间，单位秒。Cookie在maxAge秒之后失效。</p>
</li>
<li>
<p><strong>Size</strong>：此Cookie的大小。</p>
</li>
<li>
<p><strong>HTTP</strong>：此cookie的<code>httponly</code>属性。若此属性为<code>true</code>，则只有在http请求头中会带有此cookie的信息，而不能通过document.cookie来访问此cookie。</p>
</li>
<li>
<p><strong>Secure</strong>：设置是否只能通过https来传递此条cookie。</p>
</li>
</ul>
<h4 id="cookie的创建">Cookie的创建</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">// 两种方法
</span><span class="c1">// 1. 构造时将数据传入
</span><span class="c1"></span><span class="n">Cookie</span> <span class="n">cookie</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Cookie</span><span class="o">(</span><span class="s">&#34;key&#34;</span><span class="o">,</span> <span class="s">&#34;value&#34;</span><span class="o">);</span>

<span class="c1">// 2. 构造时无参，然后通过set方法设置数据
</span><span class="c1"></span><span class="n">Cookie</span> <span class="n">cookie</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Cookie</span><span class="o">();</span>
<span class="n">cookie</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;key&#34;</span><span class="o">);</span>
<span class="n">cookie</span><span class="o">.</span><span class="na">setValue</span><span class="o">(</span><span class="s">&#34;value&#34;</span><span class="o">);</span>

<span class="c1">// 除了核心的数据之外，我们还可以设置一些其他属性
</span><span class="c1">// 1. 设置过期时间
</span><span class="c1"></span><span class="n">cookie</span><span class="o">.</span><span class="na">setMaxAge</span><span class="o">(</span><span class="n">60</span><span class="o">);</span>	<span class="c1">//单位：秒(60秒后,Cookie会自动删除)
</span><span class="c1">// 2. 设置Domain
</span><span class="c1"></span><span class="n">cookie</span><span class="o">.</span><span class="na">setDomain</span><span class="o">(</span><span class="s">&#34;www.baidu.com&#34;</span><span class="o">);</span> <span class="c1">// 代表只有访问www.baidu.com这个域名下的请求，才能获取到此Cookie
</span><span class="c1"></span><span class="n">cookie</span><span class="o">.</span><span class="na">setDomain</span><span class="o">(</span><span class="s">&#34;.baidu.com&#34;</span><span class="o">);</span>	<span class="c1">// 代表所有www.baidu.com下的二级域名包括www.baidu.com这个一级域名都可以共享此Cookie（注意这种情况下domain必须以&#34;.&#34;开头）
</span><span class="c1">// 3. 设置Path 
</span><span class="c1"></span><span class="n">cookie</span><span class="o">.</span><span class="na">setPath</span><span class="o">(</span><span class="s">&#34;/StudentServlet&#34;</span><span class="o">);</span>	<span class="c1">// 一旦设置了Path，那么要获取Cookie，当前的请求地址必须满足Path的规则，否则获取不到此Cookie     http://xxx:port/student/StudentServlet/getstu/3
</span></code></pre></td></tr></table>
</div>
</div><h4 id="cookie的添加">Cookie的添加</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">// 使用响应对象写入浏览器
</span><span class="c1"></span><span class="n">reponse</span><span class="o">.</span><span class="na">addCookie</span><span class="o">(</span><span class="n">cookie</span><span class="o">);</span> <span class="c1">//本质上会在响应中添加一个Set-Cookie响应头。
</span></code></pre></td></tr></table>
</div>
</div><h4 id="cookie删除">Cookie删除</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">// Cookie没有delete方法
</span><span class="c1">// 我们可以通过设置过期时间为0实现删除
</span><span class="c1"></span><span class="n">cookie</span><span class="o">.</span><span class="na">setMaxAge</span><span class="o">(</span><span class="n">0</span><span class="o">);</span>
<span class="n">response</span><span class="o">.</span><span class="na">addCookie</span><span class="o">(</span><span class="n">cookie</span><span class="o">);</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="cookie的修改">Cookie的修改</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">// Cookie的修改其实就是覆盖添加
</span><span class="c1"></span>
<span class="c1">// 具体来说分三步
</span><span class="c1">// 1. 先获取已有Cookie，
</span><span class="c1">// 2. 然后修改其中的数据，
</span><span class="c1">// 3. 最后调用response.addCookie()重新添加到浏览器，浏览器看到Key相同的Cookie会自动更新
</span><span class="c1"></span>
</code></pre></td></tr></table>
</div>
</div><h4 id="获取cookie中的数据">获取Cookie中的数据</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">// 1. 先通过请求对象获取请求中携带的所有Cookie数组
</span><span class="c1"></span><span class="n">Cookie</span><span class="o">[]</span> <span class="n">cookies</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getCookies</span><span class="o">();</span>

<span class="c1">// 2. 迭代Cookie数组，寻找要操作的Cookie
</span><span class="c1"></span><span class="k">for</span><span class="o">(</span><span class="n">Cookie</span> <span class="n">cookie</span> <span class="o">:</span> <span class="n">cookies</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 根据cookie.getName()判断是否是自己要获取数据的cookie
</span><span class="c1"></span>	
    <span class="c1">// 3. 找到后，调用cookie.getValue()获取数据
</span><span class="c1"></span><span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="session">Session</h2>
<h3 id="session是什么">Session是什么？</h3>
<p>Session和Cookie类似，都是用来存储用户信息的。不同于Cookie的是Session是存储在服务器端。他们两者通过JSESSIONID关联起来。</p>
<h3 id="为什么要用session">为什么要用Session？</h3>
<p>虽然Cookie已经可以标识出哪个请求是属于哪个用户的。但是不足的是Cookie本身是存储于客户端硬盘上，安全性不高，不适合存储敏感数据，还有Cookie本身能存储的数据很有限（数据大小本身限制、数据类型限制、字符集限制）。而存储在服务端的Session完全没有这些问题。</p>
<h3 id="什么情况下要使用session">什么情况下要使用Session?</h3>
<p>Session可以用来存储用户的所有信息，理论上所有能在Cookie中存储的数据都可以放到Session中。考虑到Session是基于内存的，如果存储太多不太重要的数据会大大增加服务器端内存压力，一般Session会配合Cookie一起使用。</p>
<h3 id="怎么使用session">怎么使用Session?</h3>
<h4 id="创建session">创建Session</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">// Session是由容器自动创建的，我们可以在代码中直接获取Sesssion
</span><span class="c1"></span><span class="n">HttpSession</span> <span class="n">session</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getSession</span><span class="o">();</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="往session中存储数据">往Session中存储数据</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="n">session</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">();</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="获取session中的数据">获取Session中的数据</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="n">session</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">();</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="删除session中的数据">删除Session中的数据</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="n">session</span><span class="o">.</span><span class="na">removeAttribute</span><span class="o">();</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="修改session中的数据">修改Session中的数据</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">// 修改Session中的数据和修改Cookie中的数据类似，都是覆盖添加
</span><span class="c1"></span>
<span class="c1">// 1. 获取要修改的数据
</span><span class="c1"></span><span class="n">Object</span> <span class="n">data</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&#34;key&#34;</span><span class="o">);</span>

<span class="c1">// 2. 修改数据对应的属性
</span><span class="c1"></span><span class="n">data</span><span class="o">.</span><span class="na">setXXX</span><span class="o">();</span>

<span class="c1">// 3. 将修改后的数据重新存入Session
</span><span class="c1"></span><span class="n">session</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">&#34;key&#34;</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>

</code></pre></td></tr></table>
</div>
</div><h4 id="强制让session失效">强制让Session失效</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="n">session</span><span class="o">.</span><span class="na">invalidate</span><span class="o">();</span>	<span class="c1">//调用后session对象会失效，同时客户端Cookie中的JSESSIONID也会发生变化
</span></code></pre></td></tr></table>
</div>
</div>]]></description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://niconya.github.io/tags/cookie/">Cookie</category>
                                
                            
                                
                                
                                
                                    <category domain="https://niconya.github.io/tags/session/">Session</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Eclipse导入web项目出现红叉解决办法</title>
                <link>https://niconya.github.io/posts/eclipse%E5%AF%BC%E5%85%A5web%E9%A1%B9%E7%9B%AE%E5%87%BA%E7%8E%B0%E7%BA%A2%E5%8F%89%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link>
                <guid isPermaLink="true">https://niconya.github.io/posts/eclipse%E5%AF%BC%E5%85%A5web%E9%A1%B9%E7%9B%AE%E5%87%BA%E7%8E%B0%E7%BA%A2%E5%8F%89%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid>
                <pubDate>Thu, 19 Sep 2019 19:34:18 +0800</pubDate>
                
                    <author>djvineh8@gmail.com (NicoNya)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<h4 id="eclipse导入别人的java-web项目时会出现这种情况">eclipse导入别人的Java web项目时会出现这种情况：</h4>
<p><strong>仅项目名出现红叉而其他地方没有红叉的问题。</strong></p>
<p>这可能是以下几种情况导致的，其解决方法如下：</p>
<ul>
<li>导入项目之前，请确认工作空间编码已设置为utf-8：window-&gt;Preferences-&gt;General-&gt;Wrokspace-&gt;Text file encoding-&gt;Other 选择UTF-8。</li>
</ul>
<ul>
<li>
<p>导入后，由于你的开发环境中JRE以及Tomcat Library名称可能和源代码中的不一致，可能会出现Build Path的错误，解决方法如下：右键project-&gt;Build Path-&gt;Configure Build Path-&gt;选择Libraries tab页-&gt;删除带小红叉的Library-&gt;点击Add Library-&gt;选择JRE System Library(删了Tomcat Library的话就选择Server Runtime)-&gt;选择一个JRE后-&gt;Finish。</p>
</li>
<li>
<p>如果web项目能够正常部署且运行无误，进入项目包下的.settings目录，找到org.eclipse.wst.common.project.facet.core.xml文件，用记事本打开后才发现这句话有问题：《runtime name=&quot;Apache Tomcat v6.0&quot;/》。我eclipse中设置的tomcat是9.0版本的，而它的运行环境是8.5版本的tomcat，肯定会出现问题。于是把这句话删掉，刷新工程，红叉消失。</p>
</li>
</ul>]]></description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://niconya.github.io/tags/eclipse/">eclipse</category>
                                
                            
                                
                                
                                
                                    <category domain="https://niconya.github.io/tags/javaweb/">JavaWeb</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Hexo博客搭建过程</title>
                <link>https://niconya.github.io/posts/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/</link>
                <guid isPermaLink="true">https://niconya.github.io/posts/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/</guid>
                <pubDate>Mon, 09 Sep 2019 20:21:03 +0800</pubDate>
                
                    <author>djvineh8@gmail.com (NicoNya)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<h2 id="环境准备">环境准备</h2>
<h3 id="1githttpsgit-scmcom下载安装">1.<a href="https://git-scm.com">Git</a>下载安装</h3>
<h3 id="2nodejshttpsnodejsorgzh-cn下载安装">2.<a href="https://nodejs.org/zh-cn">Node.JS</a>下载安装</h3>
<p>安装完成后，要确认是否已经安装成功，在cmd中使用下列命令来验证，有返回的信息就表示安装成功了</p>
<blockquote>
<p>git --version</p>
<p>node -v</p>
<p>npm -v</p>
</blockquote>
<h2 id="安装hexohttpshexoiozh-cnindexhtml">安装<a href="https://hexo.io/zh-cn/index.html">Hexo</a></h2>
<blockquote>
<p>在git bash中输入 npm install -g hexo-cli</p>
</blockquote>
<p>因为npm默认是从国外的源获取和下载包信息，所以这个命令有时候执行很慢，甚至可能因为被墙导致无法正常安装hexo，安装失败的话建议启用科学上网或百度搜索npm加速方法解决</p>
<p>安装成功后的信息显示如下：</p>
<p><img src="https://i.loli.net/2019/09/09/u6pJI2h87tMd4ya.png" alt="hexo-01.png"></p>
<h2 id="初始化hexo">初始化Hexo</h2>
<p>安装hexo完成后，在电脑中任意位置创建一个文件夹，名字可以随意取，这个文件夹就是存放hexo站点和以后写博客的地方，进入刚刚创建的文件夹，在空白位置右键选择<code>Git Bash Here</code>，</p>
<h4 id="执行初始化hexo的命令">执行初始化hexo的命令</h4>
<blockquote>
<p>hexo init</p>
</blockquote>
<p>初始化完成过程如下：</p>
<p><img src="https://i.loli.net/2019/09/09/xLKWra2Un1wgGTX.png" alt="hexo-02.png"></p>
<h4 id="安装依赖包">安装依赖包</h4>
<blockquote>
<p>npm install</p>
</blockquote>
<p>这个命令是用来安装一些Node.js 模块。命令执行的结果如下：</p>
<p><img src="https://i.loli.net/2019/09/09/3Hac7liDpb4YTUw.png" alt="hexo-03.png"></p>
<h4 id="git部署安装">git部署安装</h4>
<blockquote>
<p>npm install hexo-deployer-git --save</p>
</blockquote>
<p><img src="https://i.loli.net/2019/09/09/R6oJtVXq83ndiAr.png" alt="hexo-04.png"></p>
<p><strong>完成这一步，hexo的安装就已经完成了。进入站点文件夹查看内容如下：</strong></p>
<p><img src="https://i.loli.net/2019/09/09/8LNCKx4cnOBi2uP.png" alt="hexo_folder.png"></p>
<ul>
<li>注意：
<ul>
<li>hexo相关命令均在<strong>站点目录</strong>下执行，用<strong>Git Bash</strong>运行</li>
<li>站点配置文件为站点目录下的 <code>_config.yml</code>文件，可以配置大部分的参数</li>
<li>package.json 存放着应用程序的信息，默认已安装<a href="http://embeddedjs.com">EJS</a>, <a href="http://learnboost.github.io/stylus">Stylus</a> 和 <a href="http://daringfireball.net/projects/markdown">Markdown</a> renderer等软件</li>
<li>scaffold 模版文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。
Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改</li>
<li>source 资源文件夹。是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去</li>
<li>themes 主题文件夹，hexo会根据主题来生成静态页面，主题配置文件为主题文件夹下的<code>_config.yml</code>文件</li>
</ul>
</li>
</ul>
<h2 id="本地预览hexo博客">本地预览Hexo博客</h2>
<p>第一次使用hexo，可以先在本地创建服务器使用</p>
<blockquote>
<p>hexo generate		# 生成静态页面 //可以直接用<code>hexo g</code> 命令</p>
<p>hexo s						# 开启本地服务器</p>
</blockquote>
<p>执行情况如下：</p>
<p><img src="https://i.loli.net/2019/09/09/XqLFHUriPtvu4VG.png" alt="hexo-05.png"></p>
<p><img src="https://i.loli.net/2019/09/09/UMFrNzd1ZVtCkQh.png" alt="hexo-06.png"></p>
<p>接下来到浏览器输入 localhost:4000 就可以看到页面内容了：</p>
<p><img src="https://i.loli.net/2019/09/09/HGSqQJ6oDuTRkK5.png" alt="hexoLocalhost.png"></p>
<p>至此，Hexo博客已经成功搭建在本地了</p>
<h2 id="部署hexo博客">部署Hexo博客</h2>
<h3 id="github准备">github准备</h3>
<ul>
<li>首先要有一个github帐号，注册并登录github</li>
<li>然后新建一个仓库， 仓库名为：&lt;Github账号名称&gt;.github.io</li>
</ul>
<h3 id="将本地hexo博客推送到新建的github仓库内">将本地Hexo博客推送到新建的github仓库内</h3>
<p>本教程使用http协议部署hexo博客</p>
<ul>
<li>
<p>修改配置文件<code>blog/_config.yml</code>，修改deploy项的内容（在文件末尾）。</p>
<pre><code>deploy:
    type: git
    repo: https://github.com/&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io.git
    branch: master
</code></pre><p><strong>注意：每个标签冒号后面都要有一个空格</strong></p>
</li>
<li>
<p>输入以下命令将hexo博客部署到github中，返回<code>INFO Deploy done: git</code>即成功推送</p>
<blockquote>
<p>hexo clean		   # 清空静态页面</p>
<p>hexo generate	# 生成静态页面</p>
<p>hexo deploy		# 上传到仓库</p>
</blockquote>
</li>
</ul>
<p>等待1分钟左右，浏览器访问网址： <code>https://&lt;Github账号名称&gt;.github.io</code>，自此，Hexo博客已经搭建到了github上</p>
<h2 id="在hexo博客中发布文章">在Hexo博客中发布文章</h2>
<h3 id="新建一篇文章">新建一篇文章</h3>
<ul>
<li>
<p>在hexo博客目录下，进入Git Bash命令窗口，输入以下命令：</p>
<blockquote>
<p>hexo new &quot;Article&quot;</p>
</blockquote>
</li>
<li>
<p>进入博客目录下的/source/_posts/ 文件夹，可以看到已经生成了名为<code>Article.md</code>的博客文件</p>
<p>如图所示：</p>
<p><img src="https://i.loli.net/2019/09/09/wD87lS6zhRIJg4y.png" alt="articletest.png"></p>
</li>
<li>
<p>打开<code>Article.md</code>文件，进行编辑即可</p>
</li>
</ul>
<h3 id="给文章添加分类和标签">给文章添加分类和标签</h3>
<p>在打开的<code>Article.md</code>中，可以看到开头已经自动生成了一段配置列表，在其中设置tags和categories属性：</p>
<pre><code>title: Article
date: 2019-09-07 20:46:51
tags:
- 博客
- hexo
categories: 测试
</code></pre><h3 id="添加阅读全文按钮">添加<code>阅读全文</code>按钮</h3>
<ul>
<li>
<p>方法一：</p>
<p>在文章任意你想添加的位置添加如下标签即可</p>
<pre><code>&lt;!-- more--&gt;
</code></pre><p>例如<code>jQuery总结.md</code>里的内容是：</p>
<blockquote>
<p>---
title: Article
date: 2019-09-07 20:46:51
tags:
- 博客
- hexo
categories: web前端
---
## 如何引入jQuery
**jQuery本质上就是一段普通的JavaScript代码， 通常使用引入外部JS的方式来使用jQuery**
```
&lt;script type=&quot;text/javascript&quot; src=&quot;js/jquery.js&quot;&gt;&lt;/script&gt;
```
&lt;!--more--&gt;
以下是正文内容，在首页预览内不显示</p>
</blockquote>
<p>在网页上显示的效果是：</p>
<p><img src="https://i.loli.net/2019/09/09/wRlYVvjoWJzBsT6.png" alt="articlepage.png"></p>
</li>
<li>
<p>方法二：</p>
<p>打开主题配置文件，找到auto_excerpt进行如下修改</p>
<pre><code>auto_excerpt:
  enable: true
  length: 150
</code></pre><p><strong><code>length</code>为摘要截取的字符长度</strong></p>
</li>
</ul>
<p>注：这两张方向显示的方法显示的样式不一样，可以都尝试一下选择喜欢的方式进行添加</p>
<h3 id="在文章中插入图片">在文章中插入图片</h3>
<ul>
<li>
<p>方法一：</p>
<ul>
<li>
<p>在hexo目录下，安装插件</p>
<blockquote>
<p>npm install hexo-asset-image --save</p>
</blockquote>
</li>
<li>
<p>在<code>hexo\source </code>目录下新建一个img文件夹，把图片放置在里面</p>
</li>
<li>
<p>在xxx.md文件中引用图片</p>
<pre><code>![header]( img/header.jpg)
</code></pre></li>
</ul>
</li>
<li>
<p>方法二：</p>
<ul>
<li>
<p>在全局配置文件<code>hexo/_config.yml</code>中将<code>post_asset_folder</code>设置为<code>true</code></p>
</li>
<li>
<p>创建文章（在创建的时候，会在<code>hexo/source/_post</code>目录下，生成一个XXX.md文件和一个XXX的文件夹）</p>
</li>
<li>
<p>把XXX这个博文需要展示的图片放在XXX文件夹目录下</p>
</li>
<li>
<p>在XXX.md文件中引入图片的方式</p>
<pre><code>{% asset_img example.jpg This is an example image %}
</code></pre></li>
</ul>
</li>
<li>
<p><strong>方法三</strong>：</p>
<p><strong>使用图床工具</strong>（本教程中插入的所有图片都是使用<a href="https://sm.ms/">sm.ms</a>提供的免费图床服务）</p>
<p>进入sm.ms网站，首页就是上传图片区域，选择要上传的图片点击Upload按钮，底部即会自动生成各种格式的图片链接，复制Markdown专用的链接，粘贴到文章中即可显示图片</p>
</li>
</ul>
<h3 id="启动服务器在本地进行测试">启动服务器，在本地进行测试</h3>
<blockquote>
<p>hexo s</p>
</blockquote>
<h2 id="发布文章到github上">发布文章到github上</h2>
<p>待发布的文章在本地预览无误后，在Git Bash窗口执行以下命令</p>
<blockquote>
<p>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</p>
</blockquote>
<p>在浏览器访问网址： <code>https://&lt;Github账号名称&gt;.github.io</code>，即可看到已经发布的文章</p>]]></description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://niconya.github.io/tags/hexo/">hexo</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>jQuery总结</title>
                <link>https://niconya.github.io/posts/jquery%E6%80%BB%E7%BB%93/</link>
                <guid isPermaLink="true">https://niconya.github.io/posts/jquery%E6%80%BB%E7%BB%93/</guid>
                <pubDate>Sat, 07 Sep 2019 20:46:51 +0800</pubDate>
                
                    <author>djvineh8@gmail.com (NicoNya)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<h1 id="jquery基础">jQuery基础</h1>
<h2 id="如何引入jquery">如何引入jQuery</h2>
<p><strong>jQuery本质上就是一段普通的JavaScript代码， 通常使用引入外部JS的方式来使用jQuery</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&#34;text/javascript&#34;</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&#34;js/jquery.js&#34;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="基础语法">基础语法</h2>
<p>基础语法： <strong>$(selector).action()</strong></p>
<ul>
<li>美元符号定义 jQuery</li>
<li>选择符（selector）&quot;查询&quot;和&quot;查找&quot; HTML 元素</li>
<li>jQuery 的 action() 执行对元素的操作</li>
</ul>
<p>实例:</p>
<ul>
<li>
<p>$(this).hide() - 隐藏当前元素</p>
</li>
<li>
<p>$(&quot;p&quot;).hide() - 隐藏所有</p>
<p>元素</p>
</li>
<li>
<p>$(&quot;p.test&quot;).hide() - 隐藏所有 class=&quot;test&quot; 的</p>
<p>元素</p>
</li>
<li>
<p>$(&quot;#test&quot;).hide() - 隐藏所有 id=&quot;test&quot; 的元素</p>
</li>
</ul>
<h2 id="选择器">选择器</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="nx">slector</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p><strong>selector就是选择器表达式，语法基本和CSS选择器一致</strong></p>
<p>示例：</p>
<ul>
<li>$(&quot;#container&quot;)</li>
<li>$(&quot;.container&quot;)</li>
<li>$(&quot;img&quot;)</li>
<li>$(&quot;input[type='password']&quot;)</li>
<li>$(&quot;#container image&quot;)</li>
</ul>
<h2 id="html操作">HTML操作</h2>
<h3 id="dom操作">DOM操作</h3>
<p><strong>jQuery 提供一系列与 DOM 相关的方法，这使访问和操作元素和属性变得很容易</strong></p>
<h3 id="属性操作">属性操作</h3>
<p><code>attr()</code>：用于获取属性值</p>
<p><strong>读取属性</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="nx">attrName</span><span class="p">);</span>

<span class="c1">//示例
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">href</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&#34;href&#34;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;div&#34;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&#34;id&#34;</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p><strong>修改属性</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="nx">attrName</span><span class="p">,</span> <span class="s2">&#34;属性值&#34;</span><span class="p">);</span>

<span class="c1">//示例
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">href</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&#34;href&#34;</span><span class="p">,</span> <span class="s2">&#34;http://www.jd.com&#34;</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>属性名不仅支持标准属性，还支持自定义属性</p>
</blockquote>
<h3 id="内容操作">内容操作</h3>
<p><strong>获得内容</strong></p>
<ul>
<li><code>text()</code>：设置或返回所选元素的文本内容</li>
<li><code>html()</code>：设置或返回所选元素的内容（包括 HTML 标记</li>
<li><code>val()</code>：设置或返回表单字段的值</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//通过 jQuery text() 和 html() 方法获得内容:
</span><span class="c1"></span><span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#btn1&#34;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
	<span class="nx">alert</span><span class="p">(</span><span class="s2">&#34;Text: &#34;</span> <span class="o">+</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#test&#34;</span><span class="p">).</span><span class="nx">text</span><span class="p">());</span>
<span class="p">});</span>
<span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#btn2&#34;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
	<span class="nx">alert</span><span class="p">(</span><span class="s2">&#34;HTML: &#34;</span> <span class="o">+</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#test&#34;</span><span class="p">).</span><span class="nx">html</span><span class="p">());</span>
<span class="p">});</span>
<span class="c1">//通过 jQuery val() 方法获得输入字段的值：
</span><span class="c1"></span><span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#btn1&#34;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
	<span class="nx">alert</span><span class="p">(</span><span class="s2">&#34;值为: &#34;</span> <span class="o">+</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#test&#34;</span><span class="p">).</span><span class="nx">val</span><span class="p">());</span>
<span class="p">});</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="样式操作">样式操作</h3>
<p><strong>通过 jQuery，可以很容易地对 CSS 元素进行操作</strong></p>
<ul>
<li>
<p><code>addClass()</code> - 向被选元素添加一个或多个类</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s2">&#34;button&#34;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
  <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;h1,h2,p&#34;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s2">&#34;blue&#34;</span><span class="p">);</span>
  <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;div&#34;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s2">&#34;important&#34;</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>removeClass()</code> - 从被选元素删除一个或多个类</p>
<pre><code>$(&quot;button&quot;).click(function(){
  $(&quot;h1,h2,p&quot;).removeClass(&quot;blue&quot;);
});
</code></pre></li>
<li>
<p><code>toggleClass()</code> - 对被选元素进行添加/删除类的切换操作</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s2">&#34;button&#34;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
  <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;h1,h2,p&#34;</span><span class="p">).</span><span class="nx">toggleClass</span><span class="p">(</span><span class="s2">&#34;blue&#34;</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>css()</code> - 设置或返回样式属性</p>
<ul>
<li>
<p>设置css属性</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s2">&#34;p&#34;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s2">&#34;background-color&#34;</span><span class="p">,</span><span class="s2">&#34;yellow&#34;</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>返回css属性</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s2">&#34;p&#34;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s2">&#34;background-color&#34;</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
</ul>
<h2 id="事件">事件</h2>
<table>
<thead>
<tr>
<th align="left">鼠标事件</th>
<th align="left">键盘事件</th>
<th align="left">表单事件</th>
<th align="left">文档/窗口事件</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><a href="https://www.runoob.com/jquery/event-click.html">click</a></td>
<td align="left"><a href="https://www.runoob.com/jquery/event-keypress.html">keypress</a></td>
<td align="left"><a href="https://www.runoob.com/jquery/event-submit.html">submit</a></td>
<td align="left"><a href="https://www.runoob.com/jquery/event-load.html">load</a></td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/jquery/event-dblclick.html">dblclick</a></td>
<td align="left"><a href="https://www.runoob.com/jquery/event-keydown.html">keydown</a></td>
<td align="left"><a href="https://www.runoob.com/jquery/event-change.html">change</a></td>
<td align="left"><a href="https://www.runoob.com/jquery/event-resize.html">resize</a></td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/jquery/event-mouseenter.html">mouseenter</a></td>
<td align="left"><a href="https://www.runoob.com/jquery/event-keyup.html">keyup</a></td>
<td align="left"><a href="https://www.runoob.com/jquery/event-focus.html">focus</a></td>
<td align="left"><a href="https://www.runoob.com/jquery/event-scroll.html">scroll</a></td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/jquery/event-mouseleave.html">mouseleave</a></td>
<td align="left"></td>
<td align="left"><a href="https://www.runoob.com/jquery/event-blur.html">blur</a></td>
<td align="left"><a href="https://www.runoob.com/jquery/event-unload.html">unload</a></td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/jquery/event-hover.html">hover</a></td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody>
</table>
<h2 id="效果">效果</h2>
<h3 id="显示隐藏">显示隐藏</h3>
<p><strong>通过 jQuery使用<code>hide()</code>和<code>show()</code> 方法来隐藏和显示 HTML 元素</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//例：
</span><span class="c1"></span><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
    <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
    <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#hide&#34;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
        <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;p&#34;</span><span class="p">).</span><span class="nx">hide</span><span class="p">();</span>
    <span class="p">});</span>
    <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#show&#34;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
        <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;p&#34;</span><span class="p">).</span><span class="nx">show</span><span class="p">();</span>
    <span class="p">});</span>
<span class="p">});</span>
<span class="o">&lt;</span><span class="err">/script&gt;</span>

<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">如果你点击</span><span class="err">“</span><span class="nx">隐藏</span><span class="err">”</span> <span class="nx">按钮</span><span class="err">，</span><span class="nx">我将会消失</span><span class="err">。</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
<span class="o">&lt;</span><span class="nx">button</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&#34;hide&#34;</span><span class="o">&gt;</span><span class="nx">隐藏</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
<span class="o">&lt;</span><span class="nx">button</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&#34;show&#34;</span><span class="o">&gt;</span><span class="nx">显示</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p><strong>使用 <code>toggle()</code> 方法来切换 <code>hide()</code> 和 <code>show() </code>方法</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s2">&#34;button&#34;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
	<span class="nx">$</span><span class="p">(</span><span class="s2">&#34;p&#34;</span><span class="p">).</span><span class="nx">toggle</span><span class="p">();</span>
<span class="p">});</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="淡入淡出">淡入淡出</h3>
<p><strong><code>fadeIn()</code>方法</strong>：用于淡入已隐藏的元素</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s2">&#34;button&#34;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
	<span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#div1&#34;</span><span class="p">).</span><span class="nx">fadeIn</span><span class="p">();</span>
	<span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#div2&#34;</span><span class="p">).</span><span class="nx">fadeIn</span><span class="p">(</span><span class="s2">&#34;slow&#34;</span><span class="p">);</span>
	<span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#div3&#34;</span><span class="p">).</span><span class="nx">fadeIn</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></td></tr></table>
</div>
</div><p><strong><code>fadeOut()</code>方法</strong>：用于淡出可见元素</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s2">&#34;button&#34;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
    <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#div1&#34;</span><span class="p">).</span><span class="nx">fadeOut</span><span class="p">();</span>
    <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#div2&#34;</span><span class="p">).</span><span class="nx">fadeOut</span><span class="p">(</span><span class="s2">&#34;slow&#34;</span><span class="p">);</span>
    <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#div3&#34;</span><span class="p">).</span><span class="nx">fadeOut</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></td></tr></table>
</div>
</div><p><strong><code>fadeToogle()</code>方法</strong>：可以在 fadeIn() 与 fadeOut() 方法之间进行切换</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s2">&#34;button&#34;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
    <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#div1&#34;</span><span class="p">).</span><span class="nx">fadeToggle</span><span class="p">();</span>
    <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#div2&#34;</span><span class="p">).</span><span class="nx">fadeToggle</span><span class="p">(</span><span class="s2">&#34;slow&#34;</span><span class="p">);</span>
    <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#div3&#34;</span><span class="p">).</span><span class="nx">fadeToggle</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></td></tr></table>
</div>
</div><p><strong><code>fadeTo()</code>方法</strong>：允许渐变为给定的不透明度（值介于 0 与 1 之间）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s2">&#34;button&#34;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
    <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#div1&#34;</span><span class="p">).</span><span class="nx">fadeTo</span><span class="p">(</span><span class="s2">&#34;slow&#34;</span><span class="p">,</span><span class="mf">0.15</span><span class="p">);</span>
    <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#div2&#34;</span><span class="p">).</span><span class="nx">fadeTo</span><span class="p">(</span><span class="s2">&#34;slow&#34;</span><span class="p">,</span><span class="mf">0.4</span><span class="p">);</span>
    <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#div3&#34;</span><span class="p">).</span><span class="nx">fadeTo</span><span class="p">(</span><span class="s2">&#34;slow&#34;</span><span class="p">,</span><span class="mf">0.7</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="滑动">滑动</h3>
<p><strong><code>slideDown()</code>方法</strong>：用于向下滑动元素</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#flip&#34;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
    <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#panel&#34;</span><span class="p">).</span><span class="nx">slideDown</span><span class="p">();</span>
<span class="p">});</span>
</code></pre></td></tr></table>
</div>
</div><p><strong><code>slideUp()</code>方法</strong>：用于向上滑动元素</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#flip&#34;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
    <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#panel&#34;</span><span class="p">).</span><span class="nx">slideUp</span><span class="p">();</span>
<span class="p">});</span>
</code></pre></td></tr></table>
</div>
</div><p><strong><code>slideToggle()</code>方法</strong>：可以在 slideDown() 与 slideUp() 方法之间进行切换</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#flip&#34;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
    <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#panel&#34;</span><span class="p">).</span><span class="nx">slideToggle</span><span class="p">();</span>
<span class="p">});</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="动画">动画</h3>
<p><strong>使用jQuery animate() 方法可以创建自定义的动画</strong></p>
<h2 id="遍历">遍历</h2>
<h3 id="遍历jquery对象">遍历jQuery对象</h3>
<h3 id="遍历数组">遍历数组</h3>
<p><strong><code>for...in</code>循环语句用于遍历数组或者对象的属性进行循环操作</strong></p>
<p>循环中的代码每执行一次，就会对数组的元素或者对象的属性进行一次操作</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//语法
</span><span class="c1"></span><span class="k">for</span> <span class="p">(</span><span class="nx">变量</span> <span class="k">in</span> <span class="nx">对象</span><span class="p">){</span>
    <span class="nx">在此执行代码</span>
<span class="p">}</span>

<span class="c1">//例
</span><span class="c1"></span><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&#34;text/javascript&#34;</span><span class="o">&gt;</span>
	<span class="kd">var</span> <span class="nx">x</span>
	<span class="kd">var</span> <span class="nx">mycars</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">()</span>
	<span class="nx">mycars</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;Saab&#34;</span>
	<span class="nx">mycars</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;Volvo&#34;</span>
	<span class="nx">mycars</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;BMW&#34;</span>

	<span class="k">for</span> <span class="p">(</span><span class="nx">x</span> <span class="k">in</span> <span class="nx">mycars</span><span class="p">){</span>
		<span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">mycars</span><span class="p">[</span><span class="nx">x</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&#34;&lt;br /&gt;&#34;</span><span class="p">)</span>
	<span class="p">}</span>
<span class="o">&lt;</span><span class="err">/script&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="ajax">Ajax</h2>
<p><strong>jQuery也可以实现异步加载</strong></p>]]></description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://niconya.github.io/tags/jquery/">jQuery</category>
                                
                            
                                
                                
                                
                                    <category domain="https://niconya.github.io/tags/javascript/">JavaScript</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>JavaScript总结</title>
                <link>https://niconya.github.io/posts/javascript%E6%80%BB%E7%BB%93/</link>
                <guid isPermaLink="true">https://niconya.github.io/posts/javascript%E6%80%BB%E7%BB%93/</guid>
                <pubDate>Sat, 07 Sep 2019 19:55:43 +0800</pubDate>
                
                    <author>djvineh8@gmail.com (NicoNya)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<h1 id="javascript基础">JavaScript基础</h1>
<h2 id="如何引入javascript">如何引入JavaScript</h2>
<h4 id="外联文件">外联文件</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&#34;引入的文件位置（本地文件位置或者远程链接）&#34;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="内联文件">内联文件</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&#34;text/javascript&#34;</span><span class="o">&gt;</span>
	<span class="nx">js代码编写的位置</span>
<span class="o">&lt;</span><span class="err">/script&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="js输出语句">Js输出语句</h2>
<p>用于基本的调试：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">()</span>	<span class="c1">//向body中写入字符串
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">()</span>	<span class="c1">//向控制台输出
</span><span class="c1"></span><span class="nx">alert</span><span class="p">()</span>		<span class="c1">//弹出框
</span></code></pre></td></tr></table>
</div>
</div><h2 id="基础语法">基础语法</h2>
<ul>
<li>
<p>语句分号（  ；）结尾，大括号包裹语句块（基本与Java语法类似）</p>
</li>
<li>
<p>严格区分大小写</p>
</li>
<li>
<p>没有添加分号时浏览器自动添加，但是消耗资源并且可能添加出错</p>
</li>
</ul>
<h2 id="注释">注释</h2>
<p><strong>Hbuilder快捷键 Ctrl + / 添加注释</strong>**</p>
<ul>
<li>
<p>单行注释：//</p>
</li>
<li>
<p>多行注释：/* */</p>
</li>
</ul>
<h2 id="javascript基本数据类型">JavaScript基本数据类型</h2>
<p>​	<strong>JavaScript 变量能够保存多种<em>数据类型</em>：数值、字符串值、数组、对象等</strong></p>
<ul>
<li>
<p><strong>Number</strong></p>
<ul>
<li>Js中只有一种数值类型Number</li>
<li>Js中的Number可以表示十进制，八进制，十六进制整数，浮点数，科学记数法</li>
<li>Js中的Number基本类型可以精确表示的最大整数是2^53，BigInt可以表述任意大的整数</li>
</ul>
</li>
<li>
<p><strong>String</strong></p>
<ul>
<li>字符串被引号包围。可以使用单引号或双引号</li>
</ul>
</li>
<li>
<p><strong>Boolean</strong></p>
<ul>
<li>布尔值只有两个值 <code>true false</code>，经常用在条件测试中</li>
</ul>
</li>
<li>
<p><strong>undefined</strong></p>
<ul>
<li>
<p>表示声明了但未赋值的变量，其值是 <code>undefined</code> ，typeof 也返回 <code>undefined</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//已经声明的变量未赋值则成为undefined
</span><span class="c1"></span>      <span class="kd">var</span> <span class="nx">a</span><span class="p">;</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">);</span>
<span class="c1">//结果为undefined
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>任何变量均可通过设置值为 <code>undefined</code> 进行清空。其类型也将是 <code>undefined</code></p>
</li>
<li>
<p>空值与 undefined 不是一回事，空的字符串变量既有值也有类型。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">car</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span><span class="p">;</span>	<span class="c1">// 值是 &#34;&#34;，类型是 &#34;string&#34;
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p><strong>null</strong></p>
<ul>
<li>
<p>null表示一个对象不存在，其数据类型为Object</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//表示一个空对象
</span><span class="c1"></span>       <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
       <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">);</span>
<span class="c1">//结果为object
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p><strong>Object</strong></p>
<ul>
<li>
<p><strong>Function</strong></p>
<ul>
<li>Function是一个功能完整的对象，作为JS的内置对象之一。JS的普通函数都是Function对象的实例，所以函数本身也是一个对象，就像var一样，只不过这个对象具有可调用特征而已。</li>
<li>function只是一个关键字，用来创建一个普通函数或对象的构造函数。</li>
</ul>
</li>
<li>
<p>RegExp</p>
<ul>
<li>
<p>RegExp 对象是带有预定义属性和方法的正则表达式对象</p>
</li>
<li>
<p>正则表达式，在 JavaScript 中，正则表达式常用于两个<em>字符串方法</em>：<code>search()</code> 和 <code>replace()</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">search</span><span class="p">()</span>	<span class="c1">//使用表达式来搜索匹配，然后返回匹配的位置。
</span><span class="c1"></span><span class="nx">replace</span><span class="p">()</span>	<span class="c1">//返回模式被替换处修改后的字符串。
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>正则表达式修饰符</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">i</span>	<span class="c1">//执行对大小写不敏感的匹配
</span><span class="c1"></span><span class="nx">g</span>	<span class="c1">//执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）
</span><span class="c1"></span><span class="nx">m</span>	<span class="c1">//执行多行匹配
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p>Date</p>
<ul>
<li>
<p>日期对象是一个静态的对象，计算机时间会不断变化，但日期对象不会</p>
</li>
<li>
<p><code>new Date()</code> 用当前日期和时间创建新的日期对象，参数可以填<code>year, month, ...</code>，用于指定日期和时间创建新的日期对象</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="mi">2018</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> 		<span class="c1">//变量分别为年、月、日、小时、分钟、秒和毫秒
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p><strong>JSON</strong></p>
<ul>
<li>
<p><strong>JSON对象语法</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="p">{</span> <span class="s2">&#34;name&#34;</span><span class="o">:</span><span class="s2">&#34;Nya&#34;</span><span class="p">,</span> <span class="s2">&#34;age&#34;</span><span class="o">:</span><span class="mi">21</span><span class="p">,</span> <span class="s2">&#34;car&#34;</span><span class="o">:</span><span class="kc">null</span> <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>JSON 对象被花括号<code>{}</code>包围</li>
<li>JSON对象以键/值对的方式书写</li>
<li>键必须是字符串，值必须是有效的 JSON 数据类型（字符串、数字、对象、数组、布尔或 null）</li>
<li>键和值由冒号分隔</li>
<li>每个键/值对由逗号分隔</li>
</ul>
</li>
<li>
<p>访问JSON对象值</p>
<ul>
<li>
<p>使用点（<code>.</code>）访问对象JSON值</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">myObj</span> <span class="o">=</span>  <span class="p">{</span> <span class="s2">&#34;name&#34;</span><span class="o">:</span><span class="s2">&#34;Nya&#34;</span><span class="p">,</span> <span class="s2">&#34;age&#34;</span><span class="o">:</span><span class="mi">21</span><span class="p">,</span> <span class="s2">&#34;car&#34;</span><span class="o">:</span><span class="kc">null</span> <span class="p">};</span>
<span class="nx">x</span> <span class="o">=</span> <span class="nx">myObj</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>也可以使用户方括号（<code>[]</code>）访问JSON对象值</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">myObj</span> <span class="o">=</span>  <span class="p">{</span> <span class="s2">&#34;name&#34;</span><span class="o">:</span><span class="s2">&#34;Nya&#34;</span><span class="p">,</span> <span class="s2">&#34;age&#34;</span><span class="o">:</span><span class="mi">21</span><span class="p">,</span> <span class="s2">&#34;car&#34;</span><span class="o">:</span><span class="kc">null</span> <span class="p">};</span>
<span class="nx">x</span> <span class="o">=</span> <span class="nx">myObj</span><span class="p">[</span><span class="s2">&#34;name&#34;</span><span class="p">];</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p>遍历JSON对象</p>
<ul>
<li>
<p>使用<code>for-in</code>遍历JSON对象</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">myObj</span> <span class="o">=</span>  <span class="p">{</span> <span class="s2">&#34;name&#34;</span><span class="o">:</span><span class="s2">&#34;Nya&#34;</span><span class="p">,</span> <span class="s2">&#34;age&#34;</span><span class="o">:</span><span class="mi">21</span><span class="p">,</span> <span class="s2">&#34;car&#34;</span><span class="o">:</span><span class="kc">null</span> <span class="p">};</span>
<span class="k">for</span> <span class="p">(</span><span class="nx">x</span> <span class="k">in</span> <span class="nx">myObj</span><span class="p">){</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;demo&#34;</span><span class="p">).</span><span class="nx">innerHtml</span> <span class="o">+=</span> <span class="nx">myObj</span><span class="p">[</span><span class="nx">x</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>对于嵌套的JSON对象，使用点号和括号访问嵌套的JSON对象</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="cm">/***实例***/</span>
<span class="nx">myObj</span> <span class="o">=</span>  <span class="p">{</span>
   <span class="s2">&#34;name&#34;</span><span class="o">:</span><span class="s2">&#34;Bill Gates&#34;</span><span class="p">,</span>
   <span class="s2">&#34;age&#34;</span><span class="o">:</span><span class="mi">62</span><span class="p">,</span>
   <span class="s2">&#34;cars&#34;</span><span class="o">:</span> <span class="p">{</span>
      <span class="s2">&#34;car1&#34;</span><span class="o">:</span><span class="s2">&#34;Porsche&#34;</span><span class="p">,</span>
      <span class="s2">&#34;car2&#34;</span><span class="o">:</span><span class="s2">&#34;BMW&#34;</span><span class="p">,</span>
      <span class="s2">&#34;car3&#34;</span><span class="o">:</span><span class="s2">&#34;Volvo&#34;</span>
   <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="cm">/***访问方法***/</span>
<span class="nx">x</span> <span class="o">=</span> <span class="nx">myObj</span><span class="p">.</span><span class="nx">cars</span><span class="p">.</span><span class="nx">car2</span><span class="p">;</span>
<span class="c1">//或者：
</span><span class="c1"></span><span class="nx">x</span> <span class="o">=</span> <span class="nx">myObj</span><span class="p">.</span><span class="nx">cars</span><span class="p">[</span><span class="s2">&#34;car2&#34;</span><span class="p">];</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p>修改值</p>
<ul>
<li>
<p>也是使用点号或括号来修改JSON对象中的任意值</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">myObj</span><span class="p">.</span><span class="nx">cars</span><span class="p">.</span><span class="nx">car3</span> <span class="o">=</span> <span class="s2">&#34;Mercedes Benz&#34;</span><span class="p">;</span>	<span class="c1">//使用点号
</span><span class="c1"></span><span class="nx">myObj</span><span class="p">.</span><span class="nx">cars</span><span class="p">[</span><span class="s2">&#34;car3&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;Mercedes Benz&#34;</span><span class="p">;</span>	<span class="c1">//使用括号
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p>删除对象属性</p>
<ul>
<li>使用<code>delete</code>删除JSON对象的属性</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript">    <span class="k">delete</span> <span class="nx">myObj</span><span class="p">.</span><span class="nx">cars</span><span class="p">.</span><span class="nx">car1</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
</li>
</ul>
</li>
</ul>
<p><strong>typeof 操作符的注意点</strong>：</p>
<ul>
<li>typeof 是操作符，不是方法。虽然我们经常使用 typeof() 的方式获取对象的数据类型</li>
<li>对 null 取 typeof 是 object（这是因为 null 是 空的对象引用），对函数取 typeof 是 function</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="kc">null</span><span class="p">);</span>	<span class="c1">//返回object
</span><span class="c1"></span>
<span class="kd">function</span> <span class="nx">demo</span><span class="p">(){</span>  
	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;demo&#39;</span><span class="p">);</span>  
<span class="p">}</span>  
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">demo</span><span class="p">);</span>	<span class="c1">// 返回function 
</span></code></pre></td></tr></table>
</div>
</div><h2 id="javascript变量">JavaScript变量</h2>
<p><strong>JavaScript 变量是存储数据值的容器，作用和Java里的变量类似</strong></p>
<p><strong>其声明形式不需要指定具体类型，统一用<code>var</code>关键字声明</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">7</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">z</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span> 
</code></pre></td></tr></table>
</div>
</div><p><strong>Js标识符</strong>：所有JavaScript<strong>变量</strong>必须以<strong>唯一的名称</strong>标识。这些唯一的名称称为<strong>标识符</strong>，标识符命名规则与java基本一致</p>
<p><strong>JavaScript 变量可存放多种数据类型</strong>：</p>
<p>​		字符串被包围在双引号或单引号中。数值不用引号。如果把数值放在引号中，会被视作文本字符串。</p>
<h2 id="程序控制语句">程序控制语句</h2>
<h3 id="条件语句">条件语句</h3>
<p><strong>用来执行逻辑判断的语句</strong></p>
<ul>
<li>
<p>条件判断语句</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;A&#34;</span><span class="p">);</span>
<span class="p">}</span><span class="k">else</span><span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;B&#34;</span><span class="p">);</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="o">!=</span> <span class="mi">5</span><span class="p">)</span><span class="err">｛</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;C&#34;</span><span class="p">);</span>
  <span class="err">｝</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>条件分支语句</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"> <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="k">switch</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span>
     <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
         <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;1&#34;</span><span class="p">);</span>
         <span class="k">break</span><span class="p">;</span>
     <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
         <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;2&#34;</span><span class="p">);</span>
         <span class="k">break</span><span class="p">;</span>
     <span class="k">default</span><span class="o">:</span>
         <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;其他&#34;</span><span class="p">);</span>
         <span class="k">break</span><span class="p">;</span>
  <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="循环语句">循环语句</h3>
<p><strong>使代码能在某种条件下不断执行的语句</strong></p>
<ul>
<li>
<p><code>for</code>循环</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"> <span class="cm">/**语法**/</span>
 <span class="k">for</span><span class="p">(</span><span class="nx">初始化变量</span><span class="p">;</span> <span class="nx">条件表达式</span><span class="p">;</span> <span class="nx">更新变量</span><span class="p">){</span>
     <span class="nx">语句</span><span class="p">...</span>
 <span class="p">}</span>
       
 <span class="cm">/**例**/</span>
 <span class="kd">function</span> <span class="nx">p</span><span class="p">(</span><span class="nx">i</span><span class="p">){</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">&#34;&lt;br&gt;&#34;</span><span class="p">);</span>
 <span class="p">}</span>
 <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
   <span class="nx">p</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
 <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>for…in</code>循环：</p>
<ul>
<li>用于对数组或者对象的属性进行循环操作</li>
<li>循环中的代码每执行一次，就会对数组的元素或者对象的属性进行一次操作</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="cm">/**语法**/</span>
<span class="k">for</span> <span class="p">(</span><span class="nx">变量</span> <span class="k">in</span> <span class="nx">对象</span><span class="p">){</span>
    <span class="nx">执行代码</span><span class="p">...</span>
<span class="p">}</span>
  
<span class="cm">/**例**/</span>
<span class="kd">var</span> <span class="nx">x</span>
<span class="kd">var</span> <span class="nx">mycars</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">()</span>
<span class="nx">mycars</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;Saab&#34;</span>
<span class="nx">mycars</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;Volvo&#34;</span>
<span class="nx">mycars</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;BMW&#34;</span>
<span class="k">for</span> <span class="p">(</span><span class="nx">x</span> <span class="k">in</span> <span class="nx">mycars</span><span class="p">){</span>
  <span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">mycars</span><span class="p">[</span><span class="nx">x</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&#34;&lt;br /&gt;&#34;</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h2 id="对象">对象</h2>
<h3 id="自定义对象">自定义对象</h3>
<ul>
<li>
<p>使用new关键字创建对象</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">();</span>
<span class="nx">person</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s2">&#34;Nya&#34;</span><span class="p">;</span>
<span class="nx">person</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="mi">21</span><span class="p">;</span>
<span class="nx">person</span><span class="p">.</span><span class="nx">sex</span> <span class="o">=</span> <span class="s2">&#34;男&#34;</span><span class="p">;</span>
<span class="c1">//创建了对象的一个新实例，并向其添加了四个属性
</span></code></pre></td></tr></table>
</div>
</div><p>new所调用的函数是一个构造函数constructor()，构造函数是专门用来创建对象的函数，使用typeof语句会返回object</p>
</li>
<li>
<p>通过function设计一个对象</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//创建函数构造器
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">person</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">,</span> <span class="nx">sex</span><span class="p">){</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">sex</span> <span class="o">=</span> <span class="nx">sex</span>	<span class="c1">//在JS中，this通常指向的是我们正在执行的函数本身，或者是指向该函数所属的对象（运行时）
</span><span class="c1"></span><span class="p">}</span>
  
<span class="c1">//创建对象实例
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">myFather</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">person</span><span class="p">(</span><span class="s2">&#34;Ton&#34;</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="s2">&#34;男&#34;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">myMother</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">person</span><span class="p">(</span><span class="s2">&#34;Sally&#34;</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="s2">&#34;女&#34;</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p>构造函数内部也可以定义方法</p>
</li>
<li>
<p>使用JSON创建对象</p>
<blockquote>
<p><em>–-详见数据类型一节-–</em></p>
</blockquote>
</li>
</ul>
<h3 id="js内置对象">JS内置对象</h3>
<p><strong>Window对象</strong></p>
<ul>
<li>
<p><strong>Document对象</strong></p>
<p>Document对象包含当前文档的信息，例如：标题、背景、颜色、表格等</p>
<p>常用方法：</p>
<ul>
<li>
<p>通过<code>write()</code>方法在浏览器中显示内容</p>
</li>
<li>
<p><code>getElementById()</code>和<code>getElementByTagName()</code>，这两个方法会忽略文档的结构，可查找整个HTML文档中的任何元素（不论它们在文档中所处的位置，例如通过getElementByTagName()可以把文档中所有的<p>元素找到）</p>
</li>
<li>
<p><code>cookie</code>方法会返回一个包含所有的cookie的字符串，每条cookie以分号和空格(; )分隔(即<code>key*=*value </code>键值对)：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">allCookies</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>body</code>方法会返回道歉文档中的<code>&lt;body&gt;</code>元素或者<code>&lt;frameset&gt;</code>元素</p>
</li>
</ul>
</li>
<li>
<p>Screen对象</p>
<p><strong>window.screen</strong>对象在编写时可以不使用 window 这个前缀</p>
<p>一些属性：</p>
<ul>
<li>
<p>screen.availWidth - 可用的屏幕宽度</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">&#34;可用宽度: &#34;</span> <span class="o">+</span> <span class="nx">screen</span><span class="p">.</span><span class="nx">availWidth</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>screen.availHeight - 可用的屏幕高度</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">&#34;可用高度: &#34;</span> <span class="o">+</span> <span class="nx">screen</span><span class="p">.</span><span class="nx">availHeight</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p><strong>Location对象</strong></p>
<p>location.href 属性</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//改变当前网页地址（加载新的网页）：
</span><span class="c1"></span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="s1">&#39;http://www.baidu.com&#39;</span><span class="p">;</span>
  
<span class="c1">//返回（当前页面的)整个URL：
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>History对象</p>
<p>一些方法：</p>
<ul>
<li>
<p><code>history.back()</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&#34;button&#34;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&#34;Back&#34;</span> <span class="nx">onclick</span><span class="o">=</span><span class="s2">&#34;goBack()&#34;</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
    <span class="kd">function</span> <span class="nx">goBack</span><span class="p">(){</span>
        <span class="nb">window</span><span class="p">.</span><span class="nx">history</span><span class="p">.</span><span class="nx">back</span><span class="p">()</span>
    <span class="p">}</span>
<span class="o">&lt;</span><span class="err">/script&gt;</span>
    
</code></pre></td></tr></table>
</div>
</div><p>以上代码效果为返回上一页按钮</p>
</li>
<li>
<p><code>history.forward()</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&#34;button&#34;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&#34;Forward&#34;</span> <span class="nx">onclick</span><span class="o">=</span><span class="s2">&#34;goForward()&#34;</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
    <span class="kd">function</span> <span class="nx">goBack</span><span class="p">(){</span>
        <span class="nb">window</span><span class="p">.</span><span class="nx">history</span><span class="p">.</span><span class="nx">forwardk</span><span class="p">()</span>
    <span class="p">}</span>
<span class="o">&lt;</span><span class="err">/script&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>以上代码效果为跳到下一页按钮</p>
</li>
</ul>
</li>
</ul>
<h2 id="函数">函数</h2>
<h3 id="javascript函数语法">JavaScript函数语法</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">function</span> <span class="nx">functionname</span><span class="p">(</span> <span class="nx">参数</span><span class="p">...</span><span class="cm">/*可选*/</span> <span class="p">){</span>
    <span class="c1">// 执行代码
</span><span class="c1"></span><span class="p">}</span>
<span class="c1">//注：JavaScript 对大小写敏感。关键词 function 必须是小写的，并且必须以与函数名称相同的大小写来调用函数
</span></code></pre></td></tr></table>
</div>
</div><p>​	当调用该函数时，会执行函数内的代码。</p>
<p>​	可以在某事件发生时直接调用函数（比如当用户点击按钮时），并且可由 JavaScript 在任何位置进行调用。</p>
<h3 id="获取函数参数">获取函数参数</h3>
<ul>
<li>常规方式</li>
<li>通过内置arguments对象获取</li>
</ul>
<h3 id="自调用函数">自调用函数</h3>
<p>函数表达式可以 &quot;自调用&quot;，自调用表达式会自动调用。</p>
<p>如果表达式后面紧跟 () ，则会自动调用。</p>
<p>不能自调用声明的函数。</p>
<p>通过添加括号，来说明它是一个函数表达式</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="s2">&#34;Hello!!&#34;</span><span class="p">;</span>      <span class="c1">// 我将调用自己
</span><span class="c1"></span><span class="p">})();</span>
<span class="c1">//以上函数实际上是一个匿名自我调用的函数(没有函数名)
</span></code></pre></td></tr></table>
</div>
</div><h2 id="javascript的使用场景">JavaScript的使用场景</h2>
<h3 id="添加交互事件">添加交互事件</h3>
<p>​	<strong>对事件做出反应</strong></p>
<p>​	可以在事件发生时执行 JavaScript，比如当用户在 HTML 元素上点击时</p>
<pre><code>&lt;h1 onclick=&quot;this.innerHTML='Ooops!'&quot;&gt;点击文本!&lt;/h1&gt;
</code></pre><h3 id="操作dom元素">操作DOM元素</h3>
<p>​	可以使用JavaScript 来向HTML DOM元素分配事件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//例：向button元素分配onclick事件：
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;myBtn&#34;</span><span class="p">).</span><span class="nx">onclick</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">displayDate</span><span class="p">()};</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="操作样式">操作样式</h3>
<p>​	JavaScript操作style样式</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//语法
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">属性名</span> <span class="o">=</span> <span class="nx">属性值</span><span class="p">;</span>
<span class="c1">//例如：
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByClassName</span><span class="p">(</span><span class="s1">&#39;box&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">style</span><span class="p">.</span><span class="nx">background</span> <span class="o">=</span> <span class="s1">&#39;red&#39;</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="验证表单">验证表单</h3>
<ul>
<li>
<p><strong>必填（或必选项目）</strong></p>
<p>JavaScript可以用来检查用户是否已填写表达中的必填（或必选）项目。假如必填或必选项为空，那么警告框会弹出</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="o">&lt;</span><span class="nx">form</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&#34;myForm&#34;</span> <span class="nx">action</span><span class="o">=</span><span class="s2">&#34;demo-form.php&#34;</span> <span class="nx">onsubmit</span><span class="o">=</span><span class="s2">&#34;return validateForm()&#34;</span> <span class="nx">method</span><span class="o">=</span><span class="s2">&#34;post&#34;</span><span class="o">&gt;</span>
<span class="nx">姓</span><span class="o">:</span> <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&#34;text&#34;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&#34;fname&#34;</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&#34;submit&#34;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&#34;提交&#34;</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="err">/form&gt;</span>
  
<span class="kd">function</span> <span class="nx">validateForm</span><span class="p">()</span>
<span class="p">{</span>
  <span class="kd">var</span> <span class="nx">x</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">forms</span><span class="p">[</span><span class="s2">&#34;myForm&#34;</span><span class="p">][</span><span class="s2">&#34;fname&#34;</span><span class="p">].</span><span class="nx">value</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">x</span><span class="o">==</span><span class="kc">null</span> <span class="o">||</span> <span class="nx">x</span><span class="o">==</span><span class="s2">&#34;&#34;</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="s2">&#34;姓必须填写&#34;</span><span class="p">);</span>
    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><strong>Email验证</strong></p>
<p>检查输入的数据是否符合电子邮件地址的基本语法，只能做些基本检查：</p>
<p>输入的数据必须包含 @ 符号和点号(.)。同时，@ 不可以是邮件地址的首字符，并且 @ 之后需有至少一个点号</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="o">&lt;</span><span class="nx">form</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&#34;myForm&#34;</span> <span class="nx">action</span><span class="o">=</span><span class="s2">&#34;demo-form.php&#34;</span> <span class="nx">onsubmit</span><span class="o">=</span><span class="s2">&#34;return validateForm();&#34;</span> <span class="nx">method</span><span class="o">=</span><span class="s2">&#34;post&#34;</span><span class="o">&gt;</span>
    <span class="nx">Email</span><span class="o">:</span> <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&#34;text&#34;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&#34;email&#34;</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&#34;submit&#34;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&#34;提交&#34;</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="err">/form&gt;</span>
  
<span class="kd">function</span> <span class="nx">validateForm</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="nx">x</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">forms</span><span class="p">[</span><span class="s2">&#34;myForm&#34;</span><span class="p">][</span><span class="s2">&#34;email&#34;</span><span class="p">].</span><span class="nx">value</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">atpos</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&#34;@&#34;</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">dotpos</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">lastIndexOf</span><span class="p">(</span><span class="s2">&#34;.&#34;</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">atpos</span><span class="o">&lt;</span><span class="mi">1</span> <span class="o">||</span> <span class="nx">dotpos</span><span class="o">&lt;</span><span class="nx">atpos</span><span class="o">+</span><span class="mi">2</span> <span class="o">||</span> <span class="nx">dotpos</span><span class="o">+</span><span class="mi">2</span><span class="o">&gt;=</span><span class="nx">x</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span>
    <span class="nx">alert</span><span class="p">(</span><span class="s2">&#34;不是一个有效的 e-mail 地址&#34;</span><span class="p">);</span>
    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="异步请求ajax">异步请求Ajax</h3>
<p><strong>请求：</strong></p>
<ul>
<li>同步请求:只有当一次请求完全结束以后才能够发起另一次请求</li>
<li>异步请求:不需要其他请求结束就可以向服务器发起请求</li>
</ul>
<p>**Ajax：**Asynchronous javaScript and xml (<strong>异步的JavaScript和xml技术</strong>)。</p>
<p>当我们向服务器发起请求的时候，服务器不会像浏览器响应整个页面，而是只有局部刷新。它是一个异步请求，浏览器页面只需要进行局部刷新，效率非常的高</p>
<h3 id="正则匹配">正则匹配</h3>
<blockquote>
<p>详见上文正则部分</p>
</blockquote>
<h2 id="定时器">定时器</h2>
<p><strong>js 定时器有以下两个方法：</strong></p>
<h3 id="setinterval">setInterval</h3>
<p>不停地重复执行，按照指定的周期（以毫秒计）来调用函数或计算表达式。方法会不停地调用函数，直到 clearInterval() 被调用或窗口被关闭</p>
<p>使用形式：函数setInterval(函数名, 重复执行的时间间隔毫秒数 );</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
<span class="kd">function</span> <span class="nx">printTime</span><span class="p">(){</span>
	<span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
	<span class="kd">var</span> <span class="nx">h</span><span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">getHours</span><span class="p">();</span>
	<span class="kd">var</span> <span class="nx">m</span><span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">getMinutes</span><span class="p">();</span>
	<span class="kd">var</span> <span class="nx">s</span><span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">getSeconds</span><span class="p">();</span>
	<span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;time&#34;</span><span class="p">).</span><span class="nx">innerHTML</span><span class="o">=</span> <span class="nx">h</span><span class="o">+</span><span class="s2">&#34;:&#34;</span><span class="o">+</span><span class="nx">m</span><span class="o">+</span><span class="s2">&#34;:&#34;</span><span class="o">+</span><span class="nx">s</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">showTimeIn3Seconds</span><span class="p">(){</span>
	<span class="nx">setTimeout</span><span class="p">(</span><span class="nx">printTime</span><span class="p">,</span><span class="mi">3000</span><span class="p">);</span> 
<span class="p">}</span>
<span class="o">&lt;</span><span class="err">/script&gt;</span>

<span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&#34;time&#34;</span><span class="o">&gt;&lt;</span><span class="err">/div&gt;</span>
<span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onclick</span><span class="o">=</span><span class="s2">&#34;showTimeIn3Seconds()&#34;</span><span class="o">&gt;</span><span class="nx">点击后3秒钟后显示当前时间</span><span class="err">，</span><span class="nx">并且只显示一次</span><span class="o">&lt;</span><span class="err">/button&gt;</span>

<span class="cm">/**
</span><span class="cm">通过setInterval**重复执行同一个函数**，重复的时间间隔由第二个参数指定
</span><span class="cm">**/</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="settimeout">setTimeout</h3>
<p>在指定的毫秒数后调用函数或计算表达式</p>
<p>使用形式：函数setTimeout(functionname, 距离开始时间毫秒数 );</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//例：每隔1秒钟，打印当前时间
</span><span class="c1"></span><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
<span class="kd">function</span> <span class="nx">printTime</span><span class="p">(){</span>
	<span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
	<span class="kd">var</span> <span class="nx">h</span><span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">getHours</span><span class="p">();</span>
	<span class="kd">var</span> <span class="nx">m</span><span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">getMinutes</span><span class="p">();</span>
	<span class="kd">var</span> <span class="nx">s</span><span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">getSeconds</span><span class="p">();</span>
	<span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;time&#34;</span><span class="p">).</span><span class="nx">innerHTML</span><span class="o">=</span> <span class="nx">h</span><span class="o">+</span><span class="s2">&#34;:&#34;</span><span class="o">+</span><span class="nx">m</span><span class="o">+</span><span class="s2">&#34;:&#34;</span><span class="o">+</span><span class="nx">s</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">t</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(</span><span class="nx">printTime</span><span class="p">,</span><span class="mi">1000</span><span class="p">);</span>
<span class="o">&lt;</span><span class="err">/script&gt;</span>

<span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&#34;time&#34;</span><span class="o">&gt;&lt;</span><span class="err">/div&gt;</span>

<span class="cm">/**
</span><span class="cm">document.getElementById 获取id=time的div元素 
</span><span class="cm">.innerHTML 修改该元素的内容
</span><span class="cm">**/</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="事件">事件</h2>
<p><strong>事件是JavaScript允许HTML与用户交互的行为。 用户任何对网页的操作，都会产生一个事件</strong></p>
<h3 id="onchangehtml元素改变事件">onchange	HTML元素改变事件</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//例：离开输入字段时，会触发一个函数，将输入文本转换为大写
</span><span class="c1"></span><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
<span class="kd">function</span> <span class="nx">myFunction</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;fname&#34;</span><span class="p">);</span>
  <span class="nx">x</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">x</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">();</span>
<span class="p">}</span>
<span class="o">&lt;</span><span class="err">/script&gt;</span>

<span class="nx">请输入您的名字</span><span class="err">：</span><span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&#34;text&#34;</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&#34;fname&#34;</span> <span class="nx">onchange</span><span class="o">=</span><span class="s2">&#34;myFunction()&#34;</span><span class="o">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="onclick鼠标点击事件">onclick	鼠标点击事件</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//例：点击按钮弹出“Hello JavaScript”
</span><span class="c1"></span><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
<span class="kd">function</span> <span class="nx">showHello</span><span class="p">(){</span>
	<span class="nx">alert</span><span class="p">(</span><span class="s2">&#34;Hello JavaScript&#34;</span><span class="p">);</span>
<span class="p">}</span>
<span class="o">&lt;</span><span class="err">/script&gt;</span>

<span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onclick</span><span class="o">=</span><span class="s2">&#34;showHello()&#34;</span><span class="o">&gt;</span><span class="nx">点击一下</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="onblur">onblur</h3>
<p>onblur 事件会在对象失去焦点时发生</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//例：离开输入框后会将文本转化为大写
</span><span class="c1"></span><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&#34;text/javascript&#34;</span><span class="o">&gt;</span>
<span class="kd">function</span> <span class="nx">upperCase</span><span class="p">(){</span>
	<span class="kd">var</span> <span class="nx">x</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;fname&#34;</span><span class="p">).</span><span class="nx">value</span>
	<span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;fname&#34;</span><span class="p">).</span><span class="nx">value</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">()</span>
<span class="p">}</span>
<span class="o">&lt;</span><span class="err">/script&gt;</span>

<span class="nx">输入您的姓名</span><span class="err">：</span>
<span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&#34;text&#34;</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&#34;fname&#34;</span> <span class="nx">onblur</span><span class="o">=</span><span class="s2">&#34;upperCase()&#34;</span> <span class="o">/&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="onmouseover--onmouseout">onmouseover / onmouseout</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//例：鼠标移入移出事件
</span><span class="c1"></span><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
<span class="kd">function</span> <span class="nx">mOver</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">obj</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">&#34;谢谢您&#34;</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">mOut</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">obj</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">&#34;请把鼠标移上来&#34;</span>
<span class="p">}</span>
<span class="o">&lt;</span><span class="err">/script&gt;</span>

<span class="o">&lt;</span><span class="nx">div</span> <span class="nx">onmouseover</span><span class="o">=</span><span class="s2">&#34;mOver(this)&#34;</span> <span class="nx">onmouseout</span><span class="o">=</span><span class="s2">&#34;mOut(this)&#34;</span> <span class="nx">style</span><span class="o">=</span><span class="s2">&#34;background-color:#D94A38;width:120px;height:20px;padding:40px;&#34;</span><span class="o">&gt;</span>
	<span class="nx">请把鼠标移上来</span>
<span class="o">&lt;</span><span class="err">/div&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="onload">onload</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//onload事件
</span><span class="c1"></span><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
<span class="kd">function</span> <span class="nx">checkCookies</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">text</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">cookieEnabled</span> <span class="o">==</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">text</span> <span class="o">=</span> <span class="s2">&#34;Cookie 已启用&#34;</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">text</span> <span class="o">=</span> <span class="s2">&#34;Cookie 未启用&#34;</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;demo&#34;</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">text</span><span class="p">;</span>
<span class="p">}</span>
<span class="o">&lt;</span><span class="err">/script&gt;</span>

<span class="o">&lt;</span><span class="nx">p</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&#34;demo&#34;</span><span class="o">&gt;&lt;</span><span class="err">/p&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="onkeydown">onkeydown</h3>
<p>键盘按下事件</p>]]></description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://niconya.github.io/tags/javascript/">JavaScript</category>
                                
                            
                        
                    
                
            </item>
        
    </channel>
</rss>
